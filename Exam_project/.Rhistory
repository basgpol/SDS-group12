Model_4$frame
plot(Model_4)
text(Model_4,pretty=0)
##Estimating transfer fee for test data
Estimate_M4=predict(Model_4,test_sample)
Estimate_M4
##Calculating RMSE
get.rmse(test_sample$transfer.fee,Estimate_M4)  #6.600
## Cross validation to find the optimal number of terminal nodes
set.seed(123)
Model_4=tree(transfer.fee~.,data=train_sample, method="anova")
prune.tree(Model_4) # Returns best pruned tree with 5 leaves, evaluating
# error on training data
prune.tree(Model_4,newdata=test_sample) # Ditto, but evaluates on test.set
Model_4.seq = prune.tree(Model_4) # Sequence of pruned tree sizes/errors
plot(Model_4.seq) # Plots size vs. error
Model_4.seq$dev # Vector of error rates for prunings, in order
opt.trees = which(Model_4.seq$dev == min(Model_4.seq$dev)) # Positions of
# optimal (with respect to error) trees
min(Model_4.seq$size[opt.trees]) # Size of smallest optimal tree
plot(Model_4)
text(Model_4,pretty=0)
library(rpart)
fit <- rpart(transfer.fee~.,
method="anova", data=train_sample)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# create additional plots
par(mfrow=c(1,2)) # two plots on one page
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
pfit<- prune(fit, cp=fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"]) # from cptable
# plot the pruned tree
plot(pfit, uniform=TRUE,
main="Pruned Regression Tree for Mileage")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
predit(pfit, test_sample)
predict(pfit, test_sample)
est=predict(pfit, test_sample)
get.rmse(est, test_sample$transfer.fee)
est=predict(fit, test_sample)
get.rmse(est, test_sample$transfer.fee)
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE, all=TRUE, cex=.8)
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE, all=TRUE, cex=.4)
text(Model_4,pretty=0,use.n=TRUE, cex=.5)
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE, cex=.5)
plot(pfit, uniform=TRUE,
main="Pruned Regression Tree for Mileage")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
post(pfit, file = "c:/ptree2.ps",
title = "Pruned Regression Tree for Mileage")
?post
plot(pfit, uniform=TRUE,
main="Pruned Regression Tree for Mileage")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
post(pfit, file = "",
title = "Pruned Regression Tree for Mileage")
est=predict(fit, test_sample)
est=predict(pfit, test_sample)
get.rmse(est, test_sample$transfer.fee)
plot(pfit, uniform=TRUE,
main="Pruned Regression Tree for Mileage")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
post(pfit, file = "",
title = "Pruned Regression Tree for Mileage")
est=predict(fit, test_sample)
est=predict(pfit, test_sample)
get.rmse(est, test_sample$transfer.fee)
# plot the pruned tree
plot(pfit, uniform=TRUE,
main="Pruned Regression Tree for Mileage")
text(pfit, use.n=TRUE, all=TRUE, cex=.4)
post(pfit, file = "",
title = "Pruned Regression Tree for Mileage")
plot(pfit, uniform=TRUE,
main="Pruned Regression Tree for Mileage")
text(pfit, use.n=TRUE, all=TRUE, cex=.4)
post(pfit, file = "",
title = "Pruned Regression Tree for Mileage")
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE, cex=.5)
post(Model_4, file = "",
title = "Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE,all=TRUE cex=.5)
post(Model_4, file = "",
title = "Regression Tree for Transfer fee ")
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE,all=TRUE cex=.5)
post(Model_4, file = "",
title = "Regression Tree for Transfer fee ")
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE,all=TRUE, cex=.5)
post(Model_4, file = "",
title = "Regression Tree for Transfer fee ")
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE,all=TRUE, cex=.6)
post(Model_4, file = "",
title = "Regression Tree for Transfer fee ")
rpart.plot(Model_4)
lirbary("rpartplot")
library("rpartplot")
library("rpart.plot")
rpart.plot(Model_4)
set.seed(123)
Model_4=tree(transfer.fee~.,data=train_sample, method="anova")
Model_4$frame
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE,all=TRUE, cex=.5)
text(Model_4,pretty=0,use.n=TRUE, cex=.5)
set.seed(123)
Model_4=tree(transfer.fee~.,data=train_sample, method="anova")
Model_4$frame
plot(Model_4,niform=TRUE,
main="Regression Tree for Transfer fee ")
text(Model_4,pretty=0,use.n=TRUE, cex=.5)
post(Model_4, file = "",
title = "Regression Tree for Transfer fee ")
library("rpart")
library("tree")
post(Model_4, file = "",
title = "Regression Tree for Transfer fee ")
plot(Model_4.seq) # Plots size vs. error
Model_4.seq$dev # Vector of error rates for prunings, in order
opt.trees = which(Model_4.seq$dev == min(Model_4.seq$dev)) # Positions of
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
##================ 4.5 Lasso model  ================
## Creating matrices with all regressors beacuse the glmnet function only works with matrices
RegressorMatrix_train=model.matrix(transfer.fee~ ., train_sample)
RegressorMatrix_test=model.matrix(transfer.fee~.,test_sample)
## Training Lasso
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
##
# estimate_M3 = predict(Model_3, RegressorMatrix_test)
# estimate_M3
# get.rmse(test_sample$transfer.fee, estimate_M3)
# Calculating RSME for each lambda
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
best.lambda = performance_Lasso$lambda[performance_Lasso$RMSError == min(performance_Lasso$RMSError)]
coef(Model_3, s = best.lambda)
## Creating matrices with all regressors beacuse the glmnet function only works with matrices
RegressorMatrix_train=model.matrix(transfer.fee~ ., train_sample)
RegressorMatrix_test=model.matrix(transfer.fee~.,test_sample)
## Training Lasso
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
##
# estimate_M3 = predict(Model_3, RegressorMatrix_test)
# estimate_M3
# get.rmse(test_sample$transfer.fee, estimate_M3)
# Calculating RSME for each lambda
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
##Visualization of RSME as a function of lamda
ggplot(performance_Lasso, aes(x = lambda, y = RMSError))+
geom_point() +
geom_line() +
theme_minimal()
## Identifying lambda with the lowest RMSE
best.lambda = performance_Lasso$lambda[performance_Lasso$RMSError == min(performance_Lasso$RMSError)]
## Coefficients for best models
coef(Model_3, s = best.lambda)
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
coef(Model_2)
?glmnet
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee, alpha=1)
## Training Lasso
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee, alpha=1)
Model_3
?glmnet
##
# estimate_M3 = predict(Model_3, RegressorMatrix_test)
# estimate_M3
# get.rmse(test_sample$transfer.fee, estimate_M3)
# Calculating RSME for each lambda
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
##Visualization of RSME as a function of lamda
ggplot(performance_Lasso, aes(x = lambda, y = RMSError))+
geom_point() +
geom_line() +
theme_minimal()
## Identifying lambda with the lowest RMSE
best.lambda = performance_Lasso$lambda[performance_Lasso$RMSError == min(performance_Lasso$RMSError)]
## Coefficients for best models
coef(Model_3, s = best.lambda)
## RMSE for best model
Estimate_M3=predict(Model_3, RegressorMatrix_test, s=best.lambda)
get.rmse(Estimate_M3, test_sample$transfer.fee)
Estimate_M3=predict(Model_3, RegressorMatrix_test, s=best.lambda)
get.rmse(Estimate_M3, test_sample$transfer.fee)
Estimate_M3=predict(Model_3, RegressorMatrix_test, s=best.lambda)
get.rmse(Estimate_M3, test_sample$transfer.fee)
performance_Lasso
Model_3
ggplot(performance_Lasso, aes(x = lambda, y = RMSError))+
geom_point() +
geom_line() +
theme_minimal()
library(ggplot2)
ggplot(performance_Lasso, aes(x = lambda, y = RMSError))+
geom_point() +
geom_line() +
theme_minimal()
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
coef(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
get.rmse(Estimate_M3, test_sample$transfer.fee)
#install.packages("caret")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
## Loading the final data set
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
## Creating a new variable which is age squared
transfer.data$transferage_sq = transfer.data$transferage^2
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month","transferage",
"league", "Status", "searchresults","transferage_sq")
## Removing observations where contract lenght is unknown
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
##================ 4.2 Create evaluation function  ================
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
##================ 4.3 Baseline model: Simple average from training sample  ================
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
#create new data frame
train_sample.1<- train_sample %>%
select(transfer.fee,league)
train_sample.1<- train_sample.1%>%
mutate(index=1:258)
#creating GGplot for visualisation
p = ggplot(train_sample.1, aes(x = index , y = transfer.fee))+
geom_segment(aes(x= index, xend=index, y=transfer.fee, yend=estimate_M1), color="red") +
geom_point(aes(x = index, y = transfer.fee, color = "black"))   +
geom_line(aes(x = index, y = estimate_M1), color="green", size =1)+
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
text=element_text(family="Goudy Old Style"))
gg <- ggplotly(p)  #using plotly to make it interactive
gg
##================ 4.4 Ordinary least square model   ================
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
coef(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
##================ 4.5 Lasso model  ================
## Creating matrices with all regressors beacuse the glmnet function only works with matrices
RegressorMatrix_train=model.matrix(transfer.fee~ ., train_sample)
RegressorMatrix_test=model.matrix(transfer.fee~.,test_sample)
## Training Lasso
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee, alpha=1)
Model_3
?glmnet
##
# estimate_M3 = predict(Model_3, RegressorMatrix_test)
# estimate_M3
# get.rmse(test_sample$transfer.fee, estimate_M3)
# Calculating RSME for each lambda
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
##Visualization of RSME as a function of lamda
ggplot(performance_Lasso, aes(x = lambda, y = RMSError))+
geom_point() +
geom_line() +
theme_minimal()
## Identifying lambda with the lowest RMSE
best.lambda = performance_Lasso$lambda[performance_Lasso$RMSError == min(performance_Lasso$RMSError)]
## Coefficients for best models
coef(Model_3, s = best.lambda)
## RMSE for best model
Estimate_M3=predict(Model_3, RegressorMatrix_test, s=best.lambda)
get.rmse(Estimate_M3, test_sample$transfer.fee)
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSE = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSE = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
p
performance_Lasso
View(performance_Lasso)
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSE = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
## Creating matrices with all regressors beacuse the glmnet function only works with matrices
RegressorMatrix_train=model.matrix(transfer.fee~ ., train_sample)
RegressorMatrix_test=model.matrix(transfer.fee~.,test_sample)
## Training Lasso
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee, alpha=1)
Model_3
?glmnet
##
# estimate_M3 = predict(Model_3, RegressorMatrix_test)
# estimate_M3
# get.rmse(test_sample$transfer.fee, estimate_M3)
# Calculating RSME for each lambda
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSE = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
lambda_values = Model_3$lambda
lambda_values
lambda_values
view(lambda_values)
library("glmnet")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
transfer.data$transferage_sq = transfer.data$transferage^2
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month","transferage",
"league", "Status", "searchresults","transferage_sq")
## Removing observations where contract lenght is unknown
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
## Creating matrices with all regressors beacuse the glmnet function only works with matrices
RegressorMatrix_train=model.matrix(transfer.fee~ ., train_sample)
RegressorMatrix_test=model.matrix(transfer.fee~.,test_sample)
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee, alpha=1)
Model_3
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSE = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
View(performance_Lasso)
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
library("glmnet")
## Loading the final data set
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
## Creating a new variable which is age squared
transfer.data$transferage_sq = transfer.data$transferage^2
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month","transferage",
"league", "Status", "searchresults","transferage_sq")
## Removing observations where contract lenght is unknown
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
#=========================================================================================
#install.packages("glmnet")
library("glmnet")
## Notes ##
# Possible prediction models
#   Average
#   OlS
#   Lasso
#   Support Vector machine
#   Regression Tree
#   Random forest
### Proposed process
## Splitting the data randomly into a test and a training set
## Internal validation: Cross-validation on the training set
## External validation: Using the model on test set
## http://stats.stackexchange.com/questions/103459/how-do-i-know-which-method-of-cross-validation-is-best
##
#install.packages("caret")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
## Loading the final data set
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
## Creating a new variable which is age squared
transfer.data$transferage_sq = transfer.data$transferage^2
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month","transferage",
"league", "Status", "searchresults","transferage_sq")
## Removing observations where contract lenght is unknown
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
##================ 4.2 Create evaluation function  ================
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
##================ 4.3 Baseline model: Simple average from training sample  ================
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
