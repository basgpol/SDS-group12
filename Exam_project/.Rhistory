<<<<<<< HEAD
post(fit, file = "c:/tree2.ps",
title = "Regression Tree for Transfer.fees ")
Model_4_fit<- prune(Model_4, cp=0.01160389) # from cptable
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.8)
Model_4_fit<- prune(Model_4, cp=0.01160389) # from cptable
# plot the pruned tree
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.8)
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
get.rmse(estimate_M4,test_sample$transfer.fee)
estimate_M42 = predict(Model_4, test_sample)
get.rmse(estimate_M42,test_sample$transfer.fee)
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees ")
text(Model_4, use.n=TRUE, all=TRUE, cex=.3)
printcp(Model_4)
plotcp(Model_4)
Model_4_fit<- prune(Model_4, cp=0.022845) # from cptable
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
Model_4_fit<- prune(Model_4, cp=0.022845, "CP") # from cptable
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
rsq.rpart(Model_4) # visualize cross-validation results
printcp(Model_4)
plotcp(Model_4)
cp_1=Model_4$cptable[which.min(Model_4$cptable[,”xerror”]),”CP”]
cp_1=Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
Model_4_fit<- prune(Model_4, cp=cp_1, "CP") # from cptable
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
#install.packages("tree")
library("tree")
install.packages("tree")
library("tree")
Model_4=tree(formula = transfer.fee ∼positions+transferage+
league+Status+
#searchresults+
contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(formula = transfer.fee ∼positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(formula = transfer.fee ∼ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(transfer.fee ∼ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(transfer.fee~ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4
summary(Model_4)
plot(tree.boston)
text(tree.boston ,pretty=0)
plot(Model_4)
text(Model_4 ,pretty=0)
cv.Model_4=cv.tree(Model_4)
plot(ccv.Model_4$size ,cv.Model_4$dev ,type=’b’)
plot(ccv.Model_4$size ,cv.Model_4$dev ,type='b')
plot(ccv.Model_4$size,cv.Model_4$dev ,type='b')
plot(cv.Model_4$size,cv.Model_4$dev ,type='b')
?cv.tree
cv.Model_4=cv.tree(Model_4)
cv.Model_4
plot(cv.Model_4$size,cv.Model_4$dev ,type='b')
?cv.tree
cv.Model_4
summary(cv.Model_4)
summary(Model_4)
?prune
?prune.tree
prune.tree(Model_4)
prune.Model_4=prune.tree(Model_4)
predict(prune.Model_4,test_sample)
predict(cv.Model_4,test_sample)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+
#searchresults+
contract.left.month+total.goals+appearances, data=train_sample)
Model_4$cptable
alpha <- fit0$cptable[which.min(fit0$cptable[,"xerror"]),"CP"]
alpha <-Model_40$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
prune.Model_4 <- prune(fit0,alpha)
prune.Model_4 <- prune(Model_4,alpha)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
printcp(Model_4)
summary(Model_4)
##Pruning the tree
prune.Model_4 <- prune(Model_4,alpha)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(prune.Model_4, uniform=TRUE, branch=0.6, margin=0.05)
text(prune.Model_4, all=TRUE, use.n=TRUE)
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults","Status")
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
View(test_sample)
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
View(transfer.data)
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
test.data=select(transfer.data , is.na(contract.left.month) == FALSE)
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
test.data=select(transfer.data , is.na(contract.left.month) == FALSE)
View(transfer.data)
test.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
View(test_sample)
test.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
View(test.data)
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
View(train_sample)
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
estimate_M1
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
transfer.data$transferage_sq = transfer.data$transferage^2
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults","transferage_sq")
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month",
"league", "Status", "searchresults","transferage_sq")
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month","transferage",
"league", "Status", "searchresults","transferage_sq")
## Removing observations where contract lenght is unknown
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
#create new data frame
train_sample.1<- train_sample %>%
select(transfer.fee,league)
train_sample.1<- train_sample.1%>%
mutate(index=1:487)
#creating GGplot for visualisation
p = ggplot(train_sample.1, aes(x = index , y = transfer.fee))+
geom_segment(aes(x= index, xend=index, y=transfer.fee, yend=estimate_M1), color="red") +
geom_point(aes(x = index, y = transfer.fee, color = "black"))   +
geom_line(aes(x = index, y = estimate_M1), color="green", size =1)+
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
=======
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")
p
df.viz.ave$mean.transfer<-as.numeric(df.viz.ave$mean.transfer)
p = ggplot(df.viz.ave, aes( x =league, y=mean.transfer, fill=league))
p<-p + geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
>>>>>>> origin/master
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
<<<<<<< HEAD
text=element_text(family="Goudy Old Style"))
gg <- ggplotly(p)  #using plotly to make it interactive
gg
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
install.packages("ggplotly")
install.packages("plotly")
library(plotly)
train_sample.1<- train_sample %>%
select(transfer.fee,league)
train_sample.1<- train_sample.1%>%
mutate(index=1:487)
#creating GGplot for visualisation
p = ggplot(train_sample.1, aes(x = index , y = transfer.fee))+
geom_segment(aes(x= index, xend=index, y=transfer.fee, yend=estimate_M1), color="red") +
geom_point(aes(x = index, y = transfer.fee, color = "black"))   +
geom_line(aes(x = index, y = estimate_M1), color="green", size =1)+
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
=======
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")
p
df.viz.ave$mean.transfer<-as.numeric(df.viz.ave$mean.transfer)
p = ggplot(df.viz.ave, aes( x =league, y=mean.transfer, fill=league))
p<-p + geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
>>>>>>> origin/master
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
<<<<<<< HEAD
text=element_text(family="Goudy Old Style"))
#create new data frame
train_sample.1<- train_sample %>%
select(transfer.fee,league)
train_sample.1<- train_sample.1%>%
mutate(index=1:258)
#creating GGplot for visualisation
p = ggplot(train_sample.1, aes(x = index , y = transfer.fee))+
geom_segment(aes(x= index, xend=index, y=transfer.fee, yend=estimate_M1), color="red") +
geom_point(aes(x = index, y = transfer.fee, color = "black"))   +
geom_line(aes(x = index, y = estimate_M1), color="green", size =1)+
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
=======
axis.title.y=element_blank(),
axis.text.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")
p
df.viz.ave$mean.transfer<-as.numeric(df.viz.ave$mean.transfer)
p = ggplot(df.viz.ave, aes( x =league, y=mean.transfer, fill=fl))
p<-p + geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
>>>>>>> origin/master
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
<<<<<<< HEAD
text=element_text(family="Goudy Old Style"))
gg <- ggplotly(p)  #using plotly to make it interactive
gg
Model_2 = lm(transfer.fee ~ ., data = (train_sample))
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
RegressorMatrix_train=model.matrix(~ ., train_sample)
View(RegressorMatrix_train)
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
RegressorMatrix_test=model.matrix(~.,test_sample)
View(RegressorMatrix_test)
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
RegressorMatrix_train=model.matrix(transfer.fee~ ., train_sample)
RegressorMatrix_test=model.matrix(transfer.fee~.,test_sample)
View(RegressorMatrix_test)
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
ggplot(performance_Lasso, aes(x = lambda, y = RMSError))+
geom_point() +
geom_line() +
theme_minimal()
best.lambda = performance_Lasso$lambda[performance_Lasso$RMSError == min(performance_Lasso$RMSError)]
coef(Model_3, s = best.lambda)
Estimate_M3=predict(Model_3, RegressorMatrix_test
get.rmse(Estimate_M3, s=best.lambda), test_sample$transfer.fee)
Estimate_M3=predict(Model_3, RegressorMatrix_test, s=best.lambda)
get.rmse(Estimate_M3, test_sample$transfer.fee)
get.rmse(test_sample$transfer.fee, estimate_M2)
Model_4=rpart(formula=transfer.fee~., data=train_sample)
library("rpart")
Model_4=rpart(formula=transfer.fee~., data=train_sample)
Model_4$cptable
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
printcp(Model_4)
summary(Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4, uniform=TRUE, branch=0.6, margin=0.05)
text(prune.Model_4, all=TRUE, use.n=TRUE)
prune.Model_4 <- prune(Model_4,alpha)
plot(prune.Model_4, uniform=TRUE, branch=0.6, margin=0.05)
text(prune.Model_4, all=TRUE, use.n=TRUE)
estimate_M4=predict(prune.Model_4,train_sample)
estimate_M4
estimate_M4=predict(prune.Model_4,test_sample)
estimate_M4
estimate_M4=predict(Model_4,test_sample)
estimate_M4
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
library("glmnet")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
library("rpart")
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
library("rpart.plot")
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
prune.Model_4 <- prune(Model_4,alpha)
estimate_M4.1=predict.rpart(prune.Model_4,test_sample)
estimate_M4.1=predict(prune.Model_4,test_sample)
estimate_M4.1=predict(prune.Model_4,test_sample, type=vector)
estimate_M4.1=predict(prune.Model_4,test_sample, type="vector")
estimate_M4.1=predict(prune.Model_4,test_sample, type="vector")
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
?rpart
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=alpha))
prune.Model_4
Estimate_M4=predict(prune.Model_4,test_sample)
get.rmse(test_sample$transfer.fee,Estimate_M4)
par(mar=c(4,4,4,4))
prp(prune.Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
prune.Model_4
Model_4$cptable
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp="alpha"))
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=alpha))
alpha
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=0.01338981))
prune.Model_4
png("spactree9.png", width = 1200, height = 800)
post(spac.tree9, file = "", title. = "Classifying transfer fee, 7 splits",
bp = 18)
dev.off()
png("spactree9.png", width = 1200, height = 800)
p=png("spactree9.png", width = 1200, height = 800)
p
prune.Model_4
Model_4$cptable
prune.Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample,control=rpart.control(cp=0.000000001))
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
d
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
alpha
##Pruning the tree - optimal tree is the same as before
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=0.01338981))
prune.Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample,control=rpart.control(cp=0.000000001))
Model_4$cptable
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample,control=rpart.control(cp=0.000000001))
Model_4$cptable
library("tree")
Model_4=tree(formula=transfer.fee~.,data=train_sample)
summary(Model_4)
plot(Model_4)
plot(Model_4)
p=plot(Model_4)
p
install.packages("ISLR")
library("ISLR")
plot(Model_4)
plot(Model_4)
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
plot(Model_4)
p=plot(Model_4)
p
p=plot(Model_4)
p
Model_4=tree(formula=transfer.fee~.,data=train_sample)
summary(Model_4)
Model_4=tree(formula=transfer.fee~.,data=train_sample)
summary(Model_4)
Model_4=rpart(formula=transfer.fee~.,data=train_sample)
Model_4
Model_4$cptable
plot(tree.Model_4)
tree.Model_4=tree(formula=transfer.fee~.,data=train_sample)
plot(tree.Model_4)
?plot
plot.tree(tree.Model_4)
library("tree")
plot.tree(tree.Model_4)
plot.tree(tree.Model_4)
text(tree.Model_4,pretty=0)
plot(tree.Model_4)
text(tree.Model_4,pretty=0)
plot(tree.Model_4)
text(tree.Model_4,pretty=0)
cv.Model_4=cv.tree(Model_4)
Model_4=tree(transfer.fee~.,data=train_sample)
summary(Model_4)
cv.Model_4=cv.tree(Model_4)
plot(cv.Model_4$size,cv.Model_4$dev,type=’b’)
plot(cv.Model_4$size,cv.Model_4$dev,type='b')
=======
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")
p
p<-p + geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")+
scale_fill_brewer(
palette = "Blues")
p
p = ggplot(df.viz.ave, aes( x =league, y=mean.transfer))
p<-p + geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")+
scale_fill_brewer(
palette = "Blues")
p
df.viz.ave$mean.transfer<-as.numeric(df.viz.ave$mean.transfer)
p = ggplot(df.viz.ave, aes( x =league, y=mean.transfer, fill=league))
p<-p + geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")+
scale_fill_brewer(
palette = "Blues")
p
p = ggplot(df.viz.ave, aes( x =league, y=mean.transfer, fill=mean.transfer))
p<-p + geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")+
scale_fill_brewer(
palette = "Blues")
p
View(df.viz)
df.viz.status<-df.viz %>%
group_by(Status) %>%
summary(mean.transfer=mean(transfer.fee))
df.viz.status<-df.viz %>%
group_by(Status) %>%
::dplyrsummarise_(mean.transfer=mean(transfer.fee))
df.viz.status<-df.viz %>%
group_by(Status) %>%
::dplyr summarise_(mean.transfer=mean(transfer.fee))
df.viz.status<-df.viz %>%
group_by(Status) %>%
dplyr::summarise_(mean.transfer=mean(transfer.fee))
df.viz.status<-df.viz %>%
group_by(Status) %>%
dplyr::summarise(mean.transfer=mean(transfer.fee))
p = ggplot(df.viz.status, aes(y= transfer.fee, x = league))
p + geom_bar()+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")
p = ggplot(df.viz.status, aes(y= transfer.fee, x = Status))
p + geom_bar()+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")
p = ggplot(df.viz.status, aes(y= mean.transfer, x = Status))
p + geom_bar(stat = "identity")+
theme(axis.title.x=element_blank(),
axis.text.x =element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
text=element_text(family="Goudy Old Style"))+
ggtitle("Premier League Clubs spend far more on average than other leagues' clubs")
df.viz.ave<-df.viz %>%
group_by(league) %>%
dplyr::summarise(
mean.transfer=mean(transfer.fee)/n(club.to))
gg<-ggmap(myMap)+#calling map
geom_path(aes(x = lon, y = lat, group = factor(name), size=transfer.fee), #putting paths on the map
colour="red", data = transfer.path.full, alpha=0.3)
gg
gg<-ggmap(myMap)+#calling map
geom_path(aes(x = lon, y = lat, group = factor(name)), #putting paths on the map
colour="red", data = transfer.path.full, alpha=0.3)
gg
out.of.europe<-filter(transfer.path.full, lon < -10 |lat < 35)
out.of.europe.2<- filter(transfer.path.full, lon>20 |lat>60)
out.full= rbind(out.of.europe.2, out.of.europe)
View(out.full)
View(transfer.data)
write_csv("df_spending.csv")
write_csv("df_spending.csv", df.spending.club)
write_csv(df.spending.club,"df_spending_club.csv")
m <- list(
colorbar = list(title = "Total transfer spending"),
size = 10, opacity = 0.8, symbol = 'circle'
)
# geo styling
g <- list(
scope = 'europe',
projection = list(type = 'mercator'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
g
plot_ly(df.spending.club, lat = lat, lon = lon,  color = transfer.fee.total,
#text = team,
hoverinfo = "text" ,
text=paste("Team = ", df.spending.club$team,"\n", "Total transfer = ", df.spending.club$transfer.fee.total),
type = 'scattergeo', locationmode = 'ISO-3', mode = 'markers',
marker = m) %>%
layout(title = 'Football teams in Europe and transfer spending<br>(Hover for airport)', geo = g)
m <- list(
colorbar = list(title = "Total transfer spending"),
size = 10, opacity = 0.8, symbol = 'circle'
)
# geo styling
g <- list(
scope = 'europe',
projection = list(type = 'mercator'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
g
plot_ly(df.spending.club, lat = lat, lon = lon,  color = transfer.fee.total,
#text = team,
hoverinfo = "text" ,
text=paste("Team = ", df.spending.club$team,"\n", "Total transfer = ", df.spending.club$transfer.fee.total),
type = 'scattergeo', locationmode = 'ISO-3', mode = 'markers',
marker = m) %>%
layout(title = 'Football teams in Europe and transfer spending<br>(Hover for airport)', geo = g)
View(df.spending.club)
View(df.spending)
#grouping by clubs
df.spending.club = df.viz %>%
group_by(club.to,league)%>%
dplyr::summarise(transfer.fee.total = sum(transfer.fee))
#tidying data frame
colnames(df.spending.club)[1] <- "team"#change "club to" to "team"
#TEAM
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")#removing the unwanted numbers*3 because it only take one out at a time
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")
df.spending.club$team = str_replace(df.spending.club$team,"*\\[.*?\\] *","")#removing the unwanted characters between brackets
df.spending.club$team = str_replace(df.spending.club$team,"Borussia Mönchengladbach","Mönchengladbach Borussia")
df.spending.club$team = str_replace(df.spending.club$team,"FC Augsburg","Augsburg FC")
df.spending.club$team = str_replace(df.spending.club$team,"FC Köln","Cologne FC")
df.spending.club$team = str_replace(df.spending.club$team,"VfB Stuttgart","Stuttgart VfB")
df.spending.club$team = str_replace(df.spending.club$team,"Hellas Verona","Verona FC")
df.spending.club$team = str_replace(df.spending.club$team,"BSC","Berlin")
df.spending.club$team = str_replace(df.spending.club$team,"Juventus","Juventus Turin")
df.spending.club$team = str_replace(df.spending.club$team,"Inter","Inter Milan")
df.spending.club$team = str_replace(df.spending.club$team,"US","FC")
df.spending.club$team = str_replace(df.spending.club$team,"\\.","")
df.spending.club$team = str_replace(df.spending.club$team," *\\(.*?\\) *","") #remove (C) for champions
#class transforming to numeric value or character value
df.spending.club$transfer.fee.total <- as.numeric(df.spending.club$transfer.fee.total)
df.spending.club$team <- as.character(df.spending.club$team)
###ADD COUNTRIES TO TEAM NAMES (in order to find them on gmap)
df.spending.club$team <- with(df.spending.club, ifelse(league=="Bundesliga", paste(team,"GERMANY", sep = " "),
ifelse(league=="Ligue 1", paste(team,"FRANCE", sep = " "),
ifelse(league=="Serie A", paste(team,"ITALY", sep = " "),
ifelse(league=="Premier league", paste(team,"UK", sep = " "),
ifelse(league=="La Liga", paste(team,"SPAIN", sep = " "),""))))))
#geocode team
geocodes <- geocode(as.character(df.spending.club$team))
#new dataframe with geocode
df.spending.club <- data.frame(df.spending.club[1:3],geocodes)
out.of.europe<-filter(df.spending.club, lon < -10 |lat < 35)
out.of.europe.2<- filter(df.spending.club, lon>20 |lat>60)
out.full= rbind(out.of.europe.2, out.of.europe)
write_csv(df.spending.club,"df_spending_club_with_geo.csv")
#####with plotly
m <- list(
colorbar = list(title = "Total transfer spending"),
size = 10, opacity = 0.8, symbol = 'circle'
)
# geo styling
g <- list(
scope = 'europe',
projection = list(type = 'mercator'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
g
plot_ly(df.spending.club, lat = lat, lon = lon,  color = transfer.fee.total,
#text = team,
hoverinfo = "text" ,
text=paste("Team = ", df.spending.club$team,"\n", "Total transfer = ", df.spending.club$transfer.fee.total),
type = 'scattergeo', locationmode = 'ISO-3', mode = 'markers',
marker = m) %>%
layout(title = 'Football teams in Europe and transfer spending<br>(Hover for airport)', geo = g)
plot_ly(df.spending.club, lat = lat, lon = lon,  color = transfer.fee.total,
#text = team,
hoverinfo = "text" ,
text=paste("Team = ", df.spending.club$team,"\n", "Total transfer = ", df.spending.club$transfer.fee.total),
type = 'scattergeo', locationmode = 'ISO-3', mode = 'markers',
marker = m) %>%
layout(title = 'Football teams in Europe and transfer spending<br>(Hover for airport)', geo = g)
#geocode team
geocodes <- geocode(as.character(df.spending.club$team))
#geocode team
geocodes <- geocode(as.character(df.spending.club$team))
#new dataframe with geocode
df.spending.club <- data.frame(df.spending.club[1:3],geocodes)
out.of.europe<-filter(df.spending.club, lon < -10 |lat < 35)
out.of.europe.2<- filter(df.spending.club, lon>20 |lat>60)
out.full= rbind(out.of.europe.2, out.of.europe)
View(df.spending.club)
warning()
View(geocodes)
View(df.spending.club)
#grouping by clubs
df.spending.club = df.viz %>%
group_by(club.to,league)%>%
dplyr::summarise(transfer.fee.total = sum(transfer.fee))
#tidying data frame
colnames(df.spending.club)[1] <- "team"#change "club to" to "team"
#TEAM
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")#removing the unwanted numbers*3 because it only take one out at a time
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")
df.spending.club$team = str_replace(df.spending.club$team,"[1234567890]","")
df.spending.club$team = str_replace(df.spending.club$team,"*\\[.*?\\] *","")#removing the unwanted characters between brackets
df.spending.club$team = str_replace(df.spending.club$team,"Borussia Mönchengladbach","Mönchengladbach Borussia")
df.spending.club$team = str_replace(df.spending.club$team,"FC Augsburg","Augsburg FC")
df.spending.club$team = str_replace(df.spending.club$team,"FC Köln","Cologne FC")
df.spending.club$team = str_replace(df.spending.club$team,"VfB Stuttgart","Stuttgart VfB")
df.spending.club$team = str_replace(df.spending.club$team,"Hellas Verona","Verona FC")
df.spending.club$team = str_replace(df.spending.club$team,"BSC","Berlin")
df.spending.club$team = str_replace(df.spending.club$team,"Juventus","Juventus Turin")
df.spending.club$team = str_replace(df.spending.club$team,"Inter","Inter Milan")
df.spending.club$team = str_replace(df.spending.club$team,"US","FC")
df.spending.club$team = str_replace(df.spending.club$team,"\\.","")
df.spending.club$team = str_replace(df.spending.club$team," *\\(.*?\\) *","") #remove (C) for champions
#class transforming to numeric value or character value
df.spending.club$transfer.fee.total <- as.numeric(df.spending.club$transfer.fee.total)
df.spending.club$team <- as.character(df.spending.club$team)
###ADD COUNTRIES TO TEAM NAMES (in order to find them on gmap)
df.spending.club$team <- with(df.spending.club, ifelse(league=="Bundesliga", paste(team,"GERMANY", sep = " "),
ifelse(league=="Ligue 1", paste(team,"FRANCE", sep = " "),
ifelse(league=="Serie A", paste(team,"ITALY", sep = " "),
ifelse(league=="Premier league", paste(team,"UK", sep = " "),
ifelse(league=="La Liga", paste(team,"SPAIN", sep = " "),""))))))
#geocode team
geocodes <- geocode(as.character(df.spending.club$team))
#new dataframe with geocode
df.spending.club <- data.frame(df.spending.club[1:3],geocodes)
out.of.europe<-filter(df.spending.club, lon < -10 |lat < 35)
out.of.europe.2<- filter(df.spending.club, lon>20 |lat>60)
out.full= rbind(out.of.europe.2, out.of.europe)
write_csv(df.spending.club,"df_spending_club_with_geo.csv")
View(df.spending.club)
#####with plotly
m <- list(
colorbar = list(title = "Total transfer spending"),
size = 10, opacity = 0.8, symbol = 'circle'
)
# geo styling
g <- list(
scope = 'europe',
projection = list(type = 'mercator'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
g
plot_ly(df.spending.club, lat = lat, lon = lon,  color = transfer.fee.total,
#text = team,
hoverinfo = "text" ,
text=paste("Team = ", df.spending.club$team,"\n", "Total transfer = ", df.spending.club$transfer.fee.total),
type = 'scattergeo', locationmode = 'ISO-3', mode = 'markers',
marker = m) %>%
layout(title = 'Football teams in Europe and transfer spending<br>(Hover for airport)', geo = g)
geocodes <- geocode(as.character(df.spending.club$team))
df.spending.club <- data.frame(df.spending.club[1:3],geocodes)
out.of.europe<-filter(df.spending.club, lon < -10 |lat < 35)
out.of.europe.2<- filter(df.spending.club, lon>20 |lat>60)
out.full= rbind(out.of.europe.2, out.of.europe)
write_csv(df.spending.club,"df_spending_club_with_geo.csv")
m <- list(
colorbar = list(title = "Total transfer spending"),
size = 10, opacity = 0.8, symbol = 'circle'
)
g <- list(
scope = 'europe',
projection = list(type = 'mercator'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
g
plot_ly(df.spending.club, lat = lat, lon = lon,  color = transfer.fee.total,
#text = team,
hoverinfo = "text" ,
text=paste("Team = ", df.spending.club$team,"\n", "Total transfer = ", df.spending.club$transfer.fee.total),
type = 'scattergeo', locationmode = 'ISO-3', mode = 'markers',
marker = m) %>%
layout(title = 'Football teams in Europe and transfer spending<br>(Hover for airport)', geo = g)
df.transfer<-read_csv("transfer_path_full.csv", encoding = "UTF8", header = TRUE) # must be tweaked so only club.to is in europe
df.transfer<-read_csv("transfer_path_full.csv", encoding = "latin1", header = TRUE) # must be tweaked so only club.to is in europe
View(transfer.path.ful)
player.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", header=TRUE, stringsAsFactors=TRUE, fileEncoding="latin1") # loading saved version of uncleaned player data
View(player.data)
player.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", header=TRUE, stringsAsFactors=TRUE, fileEncoding="UTF8") # loading saved version of uncleaned player data
View(player.data)
transfer.data = player.data
transfer.data= completeFun(transfer.data,"club.from") #function applied to transfer data to remove unknown origin
geocodes.club.to <- geocode(as.character(transfer.data$club.to))
transfer.path.origin <- data.frame(transfer.data,geocodes.club.to)
geocodes.club.from <- geocode(as.character(transfer.data$club.from))
transfer.path.destination <- data.frame(transfer.data,geocodes.club.from)
transfer.path.destination= data.frame(rep(i, nrow(transfer.data)), transfer.data$V1, transfer.data$lon, transfer.data$lat) #creating a dataset with destination coordinates
df.transfer<-read_csv("transfer_path_full.csv", encoding = "latin1", header = TRUE) # must be tweaked so only club.to is in europe
df.transfer<-read_csv("transfer_path_full.csv", encoding = "UTF8", header = TRUE) # must be tweaked so only club.to is in europe
df.transfer<-read_csv("transfer_path_full.csv") # must be tweaked so only club.to is in europe
View(df.transfer)
colnames(df.transfer)[4] <- "team"#change "club to" to "team"
df.transfer<-read_csv("transfer_path_full.csv") # must be tweaked so only club.to is in europe
colnames(df.transfer)[5] <- "team"#change "club to" to "team"
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")#removing the unwanted numbers*3 because it only take one out at a time
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")
df.transfer$team = str_replace(df.transfer$team,"*\\[.*?\\] *","")#removing the unwanted characters between brackets
df.transfer$team = str_replace(df.transfer$team,"Borussia Mönchengladbach","Mönchengladbach Borussia")
df.transfer$team = str_replace(df.transfer$team,"FC Augsburg","Augsburg FC")
df.transfer$team = str_replace(df.transfer$team,"FC Köln","Cologne FC")
df.transfer$team = str_replace(df.transfer$team,"VfB Stuttgart","Stuttgart VfB")
df.transfer$team = str_replace(df.transfer$team,"Hellas Verona","Verona FC")
df.transfer$team = str_replace(df.transfer$team,"BSC","Berlin")
df.transfer$team = str_replace(df.transfer$team,"Juventus","Juventus Turin")
df.transfer$team = str_replace(df.transfer$team,"Inter","Inter Milan")
df.transfer$team = str_replace(df.transfer$team,"US","FC")
df.transfer$team = str_replace(df.transfer$team,"\\.","")
df.transfer$team = str_replace(df.transfer$team," *\\(.*?\\) *","") #remove (C) for champions
df.transfer$transfer.fee.total <- as.numeric(df.transfer$transfer.fee.total)
df.transfer$team <- as.character(df.transfer$team)
df.transfer$transfer.fee <- as.numeric(df.transfer$transfer.fee)
df.transfer$team <- as.character(df.transfer$team)
df.transfer$team <- with(df.transfer, ifelse(league=="Bundesliga", paste(team,"GERMANY", sep = " "),
ifelse(league=="Ligue 1", paste(team,"FRANCE", sep = " "),
ifelse(league=="Serie A", paste(team,"ITALY", sep = " "),
ifelse(league=="Premier league", paste(team,"UK", sep = " "),
ifelse(league=="La Liga", paste(team,"SPAIN", sep = " "),""))))))
View(transfer.path.origin)
transfer.path.full= rbind(transfer.path.origin, transfer.path.destination)#binding
transfer.path.full<-transfer.path.full %>%
select(lon,lat,name,club.to,club.from,transfer.fee, league)
transfer.path.full= arrange(transfer.path.full, desc(index))# organising in descending order
write.csv(transfer.path.full, "transfer_path_full.csv")
df.transfer<-read_csv("transfer_path_full.csv") # must be tweaked so only club.to is in europe
colnames(df.transfer)[5] <- "team"#change "club to" to "team"
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")#removing the unwanted numbers*3 because it only take one out at a time
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")
df.transfer$team = str_replace(df.transfer$team,"[1234567890]","")
df.transfer$team = str_replace(df.transfer$team,"*\\[.*?\\] *","")#removing the unwanted characters between brackets
df.transfer$team = str_replace(df.transfer$team,"Borussia Mönchengladbach","Mönchengladbach Borussia")
df.transfer$team = str_replace(df.transfer$team,"FC Augsburg","Augsburg FC")
df.transfer$team = str_replace(df.transfer$team,"FC Köln","Cologne FC")
df.transfer$team = str_replace(df.transfer$team,"VfB Stuttgart","Stuttgart VfB")
df.transfer$team = str_replace(df.transfer$team,"Hellas Verona","Verona FC")
df.transfer$team = str_replace(df.transfer$team,"BSC","Berlin")
df.transfer$team = str_replace(df.transfer$team,"Juventus","Juventus Turin")
df.transfer$team = str_replace(df.transfer$team,"Inter","Inter Milan")
df.transfer$team = str_replace(df.transfer$team,"US","FC")
df.transfer$team = str_replace(df.transfer$team,"\\.","")
df.transfer$team = str_replace(df.transfer$team," *\\(.*?\\) *","") #remove (C) for champions
df.transfer$transfer.fee <- as.numeric(df.transfer$transfer.fee)
df.transfer$team <- as.character(df.transfer$team)
df.transfer$team <- with(df.transfer, ifelse(league=="Bundesliga", paste(team,"GERMANY", sep = " "),
ifelse(league=="Ligue 1", paste(team,"FRANCE", sep = " "),
ifelse(league=="Serie A", paste(team,"ITALY", sep = " "),
ifelse(league=="Premier league", paste(team,"UK", sep = " "),
ifelse(league=="La Liga", paste(team,"SPAIN", sep = " "),""))))))
df.transfer= completeFun(df.transfer,"lon")#applying the function to remove NA/unidentified to transfer.path
write_csv(geocodes,"geocodes.csv")
if (df.transfer$team==df.spending.club$team, str_replace(df.transfer$lon,df.spending.club$lon),FALSE)
if (df.transfer$team==df.spending.club$team, str_replace(df.transfer$lat,df.spending.club$lat),FALSE)
?str_replace
if (df.transfer$team==df.spending.club$team, str_replace(df.transfer$lon, df.transfer$lon, df.spending.club$lon),FALSE)
?str_replace
gg<-ggmap(myMap)+#calling map
geom_path(aes(x = lon, y = lat, group = factor(name)), #putting paths on the map
colour="red", data = df.transfer, alpha=0.3)
gg
>>>>>>> origin/master
