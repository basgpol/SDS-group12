colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ””) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour("white")) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour="white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p
stargazer(output)
?inner_join
??inner_join
library("dplyr")
?inner_join
library("rvest")
library("stringr")
library("purrr")
library("dplyr")
pl.table14.link = "https://en.wikipedia.org/wiki/2014-15_Premier_League"
bl.table14.link = "https://en.wikipedia.org/wiki/2014-15_Bundesliga"
ll.table14.link = "https://en.wikipedia.org/wiki/2014-15_La_Liga"
sa.table14.link = "https://en.wikipedia.org/wiki/2014-15_Serie_A"
l1.table14.link = "https://en.wikipedia.org/wiki/2014-15_Ligue_1"
css.pl.table14 = ".wikitable:nth-child(26)"
css.bl.table14 = ".wikitable:nth-child(22)"
css.ll.table14 = ".wikitable:nth-child(29)"
css.sa.table14 = ".wikitable:nth-child(28)"
css.l1.table14 = ".wikitable:nth-child(19)"
club.data = rbind(pl.table14, bl.table14, ll.table14, sa.table14, l1.table14)
pl.table14 = pl.table14.link %>%
read_html() %>%
html_node(css.pl.table14) %>%
html_table() %>%  # then convert the HTML table into a data frame
mutate(league = "Premier league") # adding a new column with the league name
bl.table14 = bl.table14.link %>%
read_html() %>%
html_node(css.bl.table14) %>%
html_table() %>%
mutate(league = "Bundesliga")
ll.table14 = ll.table14.link %>%
read_html() %>%
html_node(css.ll.table14) %>%
html_table() %>%
mutate(league = "La Liga")
sa.table14 = sa.table14.link %>%
read_html() %>%
html_node(css.sa.table14) %>%
html_table() %>%
mutate(league = "Serie A")
l1.table14 = l1.table14.link %>%
read_html() %>%
html_node(css.l1.table14) %>%
html_table() %>%
mutate(league = "Ligue 1")
club.data = rbind(pl.table14, bl.table14, ll.table14, sa.table14, l1.table14)
View(club.data)
write.table(club.data, file = "club_data_unclean.csv",
sep = ",", col.names = NA, qmethod = "double")
attach(club.data)
club.data$Status[Pos <= 5] = "Top Club"
club.data$Status[Pos <= 15 & Pos > 5] = "Middle Club"
club.data$Status[Pos >= 16] = "Buttom Club"
detach(club.data)
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Chelsea (C)"="Chelsea", "Hull City (R)"="Hull City", "Burnley"="Burnley FC", "Queens Park Rangers (R)"="QPR",
"West Bromwich"="West Brom", "Tottenham Hotspur"="Spurs","Swansea City"="Swansea",
"Manchester United"="Manchester Utd.", "West Ham United"="West Ham", "Leicester City"="Leicester",
"Newcastle "="Newcastle United")
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "West Bromwich Albion"="West Brom")
# Spanish clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Barcelona (C)"="FC Barcelona", "Valencia"="Valencia CF", "Málaga"="Málaga CF", "Elche[d](R)"="Elche CF",
"Levante"="Levante UD", "Getafe"="Getafe CF", "Deportivo"="Dep. La Coruña", "Granada"="Granada CF",
"Eibar"="SD Eibar", "Almería (R)"="UD Almería", "Córdoba (R)"="Córdoba CF", "Sevilla"="Sevilla FC",
"Villarreal" = "Villarreal CF", "Celta Vigo" = "Celta de Vigo")
# Italian clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Juventus (C)"="Juventus", "Cargliari (R)"="Cagliari Calcio", "Parma[c](R)"="Parma", "Cesena (R)"="Cesena",
"Internazionale"="Inter", "Genoa[b]"="Genoa", "Roma"="AS Roma", "Napoli"="SSC Napoli", "Milan"="AC Milan",
"Palermo"="US Palermo", "Chievo"="Chievo Verona", "Empoli"="FC Empoli", "Udinese"="Udinese Calcio",
"Cagliari (R)"="Cagliari Calcio")
# French clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Paris Saint-Germain (C)"="Paris SG", "Evian (R)"="Evian", "Metz (R)"="FC Metz", "Lyon"="Olympique Lyon",
"Bordeaux"="G. Bordeaux", "Lille"="LOSC Lille", "Nice"="OGC Nice", "Caen"="SM Caen", "Nantes"="FC Nantes",
"Lorient"="FC Lorient", "Bordeaux"="G. Bordeaux", "Lens[b](R)"="RC Lens", "Bastia"="SC Bastia")
# German Clubs
club.data$`Team v t
e`=recode(club.data$`Team v t e`, "Bayern Munich (C)"="Bayern Munich", "SC Freiburg (R)"="SC Freiburg", "SC Paderborn 07 (R)"="SC Paderborn",
"Hamburger SV (O)"="Hamburger SV", "Borussia Mönchengladbach"="Bor. M'gladbach", "Schalke 04"="FC Schalke 04",
"Bayer Leverkusen"="Bay. Leverkusen", "Eintracht Frankfurt"="E. Frankfurt", "Borussia Dortmund"="Bor. Dortmund",
"1899 Hoffenheim" = "TSG Hoffenheim", "FSV Mainz 05"="1.FSV Mainz 05")
library(plyr)
rename(club.data, "Team v t e"="TEAM")
rename(club.data, c("Team v t e"="TEAM"))
rename(club.data, c("Team v t e"="TEAM"))
library("plyr")
rename(club.data, c("Team v t e"="TEAM"))
rename(club.data, c("Team\n\nv\nt\ne"="TEAM"))
rename(club.data, c('Team v t e'="TEAM"))
club.data = read.csv("club_data_unclean.csv") # loading saved version of uncleaned club data
View(club.data)
rename(club.data, c('Team..v.t.e'="TEAM"))
names(club.data)[names(club.data)=="Team.v..t.e"] <- "Team"
View(club.data)
names(club.data)[names(club.data)=="Team..v.t.e"] <- "Team"
club.data$Team=recode(club.data$Team, "Chelsea (C)"="Chelsea", "Hull City (R)"="Hull City", "Burnley"="Burnley FC", "Queens Park Rangers (R)"="QPR",
"West Bromwich"="West Brom", "Tottenham Hotspur"="Spurs","Swansea City"="Swansea",
"Manchester United"="Manchester Utd.", "West Ham United"="West Ham", "Leicester City"="Leicester",
"Newcastle "="Newcastle United")
club.data$Team=recode(club.data$Team, "West Bromwich Albion"="West Brom")
# Spanish clubs:
club.data$Team=recode(club.data$Team, "Barcelona (C)"="FC Barcelona", "Valencia"="Valencia CF", "Málaga"="Málaga CF", "Elche[d](R)"="Elche CF",
"Levante"="Levante UD", "Getafe"="Getafe CF", "Deportivo"="Dep. La Coruña", "Granada"="Granada CF",
"Eibar"="SD Eibar", "Almería (R)"="UD Almería", "Córdoba (R)"="Córdoba CF", "Sevilla"="Sevilla FC",
"Villarreal" = "Villarreal CF", "Celta Vigo" = "Celta de Vigo")
# Italian clubs:
club.data$Team=recode(club.data$Team, "Juventus (C)"="Juventus", "Cargliari (R)"="Cagliari Calcio", "Parma[c](R)"="Parma", "Cesena (R)"="Cesena",
"Internazionale"="Inter", "Genoa[b]"="Genoa", "Roma"="AS Roma", "Napoli"="SSC Napoli", "Milan"="AC Milan",
"Palermo"="US Palermo", "Chievo"="Chievo Verona", "Empoli"="FC Empoli", "Udinese"="Udinese Calcio",
"Cagliari (R)"="Cagliari Calcio")
# French clubs:
club.data$Team=recode(club.data$Team, "Paris Saint-Germain (C)"="Paris SG", "Evian (R)"="Evian", "Metz (R)"="FC Metz", "Lyon"="Olympique Lyon",
"Bordeaux"="G. Bordeaux", "Lille"="LOSC Lille", "Nice"="OGC Nice", "Caen"="SM Caen", "Nantes"="FC Nantes",
"Lorient"="FC Lorient", "Bordeaux"="G. Bordeaux", "Lens[b](R)"="RC Lens", "Bastia"="SC Bastia")
# German Clubs
club.data$Team=recode(club.data$Team, "Bayern Munich (C)"="Bayern Munich", "SC Freiburg (R)"="SC Freiburg", "SC Paderborn 07 (R)"="SC Paderborn",
"Hamburger SV (O)"="Hamburger SV", "Borussia Mönchengladbach"="Bor. M'gladbach", "Schalke 04"="FC Schalke 04",
"Bayer Leverkusen"="Bay. Leverkusen", "Eintracht Frankfurt"="E. Frankfurt", "Borussia Dortmund"="Bor. Dortmund",
"1899 Hoffenheim" = "TSG Hoffenheim", "FSV Mainz 05"="1.FSV Mainz 05")
library("rvest")
library("stringr")
library("purrr")
library("dplyr")
library("RCurl")
library("XML")
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
setwd("~/Dropbox/Universitet/SocialDataScience/SDS-group12/Exam_project")
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
club.data = read.csv("club_data_unclean.csv", encoding="latin1") # loading saved version of uncleaned club data
club.data = read.csv("player_data_unclean.csv", encoding="latin1") # loading saved version of uncleaned club data
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
transfer.data = subset(transfer.data, select=-c(X.1, X.2,X))
?lm
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
set.seed(123)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
train_sample = transfer.data[train.indicator, ] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, ] # selecting observations without a train indicator
View(train_sample)
install.packages("caret")
##================ 4.2 Create evaluation function  ================
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
estimate_M1 = mean(train_sample$transfer.fee)
get.rmse(mean(test_sample$transfer.fee, estimate_M1)
result.model1 = get.rmse(mean(test_sample$transfer.fee), train_sample$transfer.fee)
get.rmse(mean(test_sample$transfer.fee, estimate_M1)
get.rmse(mean(test_sample$transfer.fee, estimate_M1))
estimate_M1 = mean(train_sample$transfer.fee)
estimate_M1
sum(transfer.data=="0")
sum(transfer.data==0)
sum(transfer.data$transfer.fee==0)
sum(transfer.data$contract.left.month==NA)
sum(transfer.data$contract.left.month!=NA)
sum(transfer.data$contract.left.month!="NA")
#install.packages("caret")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
predicting.var = c("transfer.fee", "positions", #"nationality",
"appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to inable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator, predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
"league", "Status", "searchresults")] # selecting observations with a train indicator
train_sample = transfer.data[train.indicator, c("transfer.fee", "positions", #"nationality",
"appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")]
train_sample = transfer.data[train.indicator, ] # selecting observations with a train indicator
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to inable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
test_sample = transfer.data[-train.indicator, "predicting.var"] # selecting observations without a train indicator
test_sample = transfer.data[-train.indicator, "predicting.var"] # selecting observations without a train indicator
test_sample
View(transfer.data)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status")
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
library("rpart")
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+searchresults+contract.left.month+total.goals+appearances, data=train_sample)
printcp(Model_4)
summary(M)
summary(Model_4)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+searchresults+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
summary(Model_4)
?par
?mar
?par
?mar
??mar
?prp
??prp
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
install.packages("rpart.plot")
library(rpart.plot)
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(3,3,3,3))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(10,10,10,10))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(2,2,2,2))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(1,1,1,1))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(1,4,1,1))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(1,1,1,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(1,1,4,1))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(4,1,4,1))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
?par
?fallen.leaves
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$searchresults+train_sample$league) # generating linear model on training data
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$league) # generating linear model on training data
summary(Model_2)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample, method=anova)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances,method=anova data=train_sample)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances,method=anova, data=train_sample)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances,method="anova", data=train_sample)
printcp(Model_4)
plotcp(Model_4)
par(mfrow=c(1,2)) # two plots on one page
rsq.rpart(fit) # visualize cross-validation results
rsq.rpart(Model_4) # visualize cross-validation results
rsq.rpart(Model_4) # visualize cross-validation results
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
rsq.rpart(Model_4) # visualize cross-validation results
par(mfrow=c(1,2)) # two plots on one page
rsq.rpart(Model_4) # visualize cross-validation results
rsq.rpart(Model_4) # visualize cross-validation results
rsq.rpart(Model_4) # visualize cross-validation results
# plot tree
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# plot tree
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees")
text(Model_4, use.n=TRUE, all=TRUE, cex=.8)
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees")
text(Model_4, use.n=TRUE, all=TRUE, cex=.4)
text(Model_4, use.n=TRUE, all=TRUE, cex=.3)
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees")
text(Model_4, use.n=TRUE, all=TRUE, cex=.3)
summary(Model_4)
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees ")
text(Model_4, use.n=TRUE, all=TRUE, cex=.3)
# create attractive postcript plot of tree
post(fit, file = "c:/tree2.ps",
title = "Regression Tree for Transfer.fees ")
Model_4_fit<- prune(Model_4, cp=0.01160389) # from cptable
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.8)
Model_4_fit<- prune(Model_4, cp=0.01160389) # from cptable
# plot the pruned tree
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.8)
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
get.rmse(estimate_M4,test_sample$transfer.fee)
estimate_M42 = predict(Model_4, test_sample)
get.rmse(estimate_M42,test_sample$transfer.fee)
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees ")
text(Model_4, use.n=TRUE, all=TRUE, cex=.3)
printcp(Model_4)
plotcp(Model_4)
Model_4_fit<- prune(Model_4, cp=0.022845) # from cptable
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
Model_4_fit<- prune(Model_4, cp=0.022845, "CP") # from cptable
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
rsq.rpart(Model_4) # visualize cross-validation results
printcp(Model_4)
plotcp(Model_4)
cp_1=Model_4$cptable[which.min(Model_4$cptable[,”xerror”]),”CP”]
cp_1=Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
Model_4_fit<- prune(Model_4, cp=cp_1, "CP") # from cptable
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
#install.packages("tree")
library("tree")
install.packages("tree")
library("tree")
Model_4=tree(formula = transfer.fee ∼positions+transferage+
league+Status+
#searchresults+
contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(formula = transfer.fee ∼positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(formula = transfer.fee ∼ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(transfer.fee ∼ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(transfer.fee~ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4
summary(Model_4)
plot(tree.boston)
text(tree.boston ,pretty=0)
plot(Model_4)
text(Model_4 ,pretty=0)
cv.Model_4=cv.tree(Model_4)
plot(ccv.Model_4$size ,cv.Model_4$dev ,type=’b’)
plot(ccv.Model_4$size ,cv.Model_4$dev ,type='b')
plot(ccv.Model_4$size,cv.Model_4$dev ,type='b')
plot(cv.Model_4$size,cv.Model_4$dev ,type='b')
?cv.tree
cv.Model_4=cv.tree(Model_4)
cv.Model_4
plot(cv.Model_4$size,cv.Model_4$dev ,type='b')
?cv.tree
cv.Model_4
summary(cv.Model_4)
summary(Model_4)
?prune
?prune.tree
prune.tree(Model_4)
prune.Model_4=prune.tree(Model_4)
predict(prune.Model_4,test_sample)
predict(cv.Model_4,test_sample)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+
#searchresults+
contract.left.month+total.goals+appearances, data=train_sample)
Model_4$cptable
alpha <- fit0$cptable[which.min(fit0$cptable[,"xerror"]),"CP"]
alpha <-Model_40$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
prune.Model_4 <- prune(fit0,alpha)
prune.Model_4 <- prune(Model_4,alpha)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
printcp(Model_4)
summary(Model_4)
##Pruning the tree
prune.Model_4 <- prune(Model_4,alpha)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(prune.Model_4, uniform=TRUE, branch=0.6, margin=0.05)
text(prune.Model_4, all=TRUE, use.n=TRUE)
