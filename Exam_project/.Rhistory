color="red") +
geom_point(aes(x = x, y = y),
color = "black") +
geom_line(aes(x = x, y = pred),
size = 1)
p = ggplot(df.1)
p + geom_segment(aes(x=x,
xend=x,
y=y, yend=pred),
color="red") +
geom_point(aes(x = x, y = y),
color = "black") +
geom_line(aes(x = x, y = pred),
size = 1)
library("glmnet")
x = poly(df$x, 9)
y = df$y
out = glmnet(x, y)
install("glmnet")
library("glmnet")
install.packages("glmnet")
library("glmnet")
x = poly(df$x, 9)
y = df$y
out = glmnet(x, y)
out
library("jsonlite")
food = fromJSON("~/git/sds_summer/data/food.json")
food$ingredients = lapply(food$ingredients,
FUN=tolower)
food$ingredients = lapply(food$ingredients,
FUN=function(x)
gsub("-", "_", x))
food$ingredients = lapply(food$ingredients,
FUN=function(x)
gsub("[^a-z0-9_ ]", "", x))
food = fromJSON("~/git/sds_summer/data/food.json")
library("jsonlite")
food = fromJSON("~/git/sds_summer/data/food.json")
library("readr")
gh.link = "https://raw.githubusercontent.com/"
user.repo = "johnmyleswhite/ML_for_Hackers/"
branch = "master/"
link = "08-PCA/data/stock_prices.csv"
data.link = paste0(gh.link, user.repo, branch, link)
df = read_csv(data.link)
p = ggplot(df %>% filter(Stock %in% unique(df$Stock)[1:6]),
aes(x = Date, y = Close))
p + geom_point(alpha = .1, color = "yellow") +
facet_wrap(~ Stock, ncol = 3) +
geom_smooth()
library("tidyr")
df.wide = df %>% spread(Stock, Close)
df.wide = df.wide %>% na.omit
View(df.wide)
pca = princomp(select(df.wide, -Date))
market.index = predict(pca)[, 1]
market.index = data.frame(
market.index = market.index,
Date = df.wide$Date)
View(market.index)
library("lubridate")
link = "08-PCA/data/DJI.csv"
data.link = paste0(gh.link, user.repo, branch, link)
dj = read_csv(data.link)
dj = dj %>%
filter(ymd(Date) > ymd('2001-12-31')) %>%
filter(ymd(Date) != ymd('2002-02-01')) %>%
select(Date, Close)
market.data = inner_join(market.index, dj)
p = ggplot(market.data, aes(x = market.index * (-1), y = Close))
p + geom_point(alpha = .1) +
geom_smooth(method = "lm")
market.data = market.data %>%
mutate(
market.index = scale(market.index * (-1)),
Close = scale(Close))
market.data = market.data %>%
gather(index, value, -Date)
library("viridis")
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
p
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
install.packages("viridis")
library("viridis")
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
market.data = market.data %>%
mutate(
market.index = scale(market.index * (-1)),
Close = scale(Close))
market.data = market.data %>%
gather(index, value, -Date)
## ---- echo = FALSE-------------------------------------------------------
install.packages("viridis")
library("viridis")
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
install.packages("viridis")
p = ggplot(market.data, aes(x = market.index * (-1), y = Close))
p + geom_point(alpha = .1) +
geom_smooth(method = "lm")
## ---- warning = FALSE----------------------------------------------------
market.data = market.data %>%
mutate(
market.index = scale(market.index * (-1)),
Close = scale(Close))
market.data = market.data %>%
gather(index, value, -Date)
## ---- echo = FALSE-------------------------------------------------------
library("viridis")
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
library("lubridate")
install.packages("lubridate")
link = "08-PCA/data/DJI.csv"
data.link = paste0(gh.link, user.repo, branch, link)
dj = read_csv(data.link)
dj = dj %>%
filter(ymd(Date) > ymd('2001-12-31')) %>%
filter(ymd(Date) != ymd('2002-02-01')) %>%
select(Date, Close)
market.data = inner_join(market.index, dj)
## ---- echo = FALSE-------------------------------------------------------
p = ggplot(market.data, aes(x = market.index * (-1), y = Close))
p + geom_point(alpha = .1) +
geom_smooth(method = "lm")
## ---- warning = FALSE----------------------------------------------------
market.data = market.data %>%
mutate(
market.index = scale(market.index * (-1)),
Close = scale(Close))
market.data = market.data %>%
gather(index, value, -Date)
## ---- echo = FALSE-------------------------------------------------------
library("viridis")
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
link = "08-PCA/data/DJI.csv"
data.link = paste0(gh.link, user.repo, branch, link)
dj = read_csv(data.link)
dj = dj %>%
filter(ymd(Date) > ymd('2001-12-31')) %>%
filter(ymd(Date) != ymd('2002-02-01')) %>%
select(Date, Close)
market.data = inner_join(market.index, dj)
## ---- echo = FALSE-------------------------------------------------------
p = ggplot(market.data, aes(x = market.index * (-1), y = Close))
p + geom_point(alpha = .1) +
geom_smooth(method = "lm")
## ---- warning = FALSE----------------------------------------------------
market.data = market.data %>%
mutate(
market.index = scale(market.index * (-1)),
Close = scale(Close))
market.data = market.data %>%
gather(index, value, -Date)
## ---- echo = FALSE-------------------------------------------------------
library("viridis")
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
link = "08-PCA/data/DJI.csv"
data.link = paste0(gh.link, user.repo, branch, link)
dj = read_csv(data.link)
dj = dj %>%
filter(ymd(Date) > ymd('2001-12-31')) %>%
filter(ymd(Date) != ymd('2002-02-01')) %>%
select(Date, Close)
market.data = inner_join(market.index, dj)
library("lubridate")
p = ggplot(market.data, aes(x = market.index * (-1), y = Close))
p + geom_point(alpha = .1) +
geom_smooth(method = "lm")
market.data = market.data %>%
mutate(
market.index = scale(market.index * (-1)),
Close = scale(Close))
market.data = market.data %>%
gather(index, value, -Date)
library("viridis")
p = ggplot(market.data,
aes(x = Date, y = value, group = index, colour = index))
p + geom_line() +
scale_color_viridis(discrete = TRUE)
library("ISLR")
install.packages("ISLR")
library("ISLR")
df = Carseats
fit = lm(Sales~Price+Urban+US)
df = Carseats
View(df)
fit = lm(df$Sales~df$Price+df$Urban+df$US)
fit
=mean(df$Urban)
mean(df$Urban)
mean(n())
library("dplyr")
library("purrr")
summary(fit)
lm.stats=data.frame(summary(fit))
lm.stats=(summary(fit))
library("Dplyr")
lm.stats=data_frame(summary(fit))
View(lm.stats)
df.stats=data_frame(summary(fit))
fit.2 = lm(df$Sales~df$Price+df$US)
summary(fir.2)
summary(fit.2)
output.1 = fit %>% tidy
library("tidyr")
output.1 = fit %>% tidy
library("ISLR")
library("Dplyr")
library("tidyr")
df = Carseats
fit = lm(df$Sales~df$Price+df$Urban+df$US)
summary(fit)
output.1 = fit %>% tidy
output = fit %>% tidy
fit.1=summary(fit)
output = fit.1 %>% tidy
install.packages("library")
install.packages("stargazer")
library("stargazer")
stargazer(fit.1)
install.packages("broom")
library("broom")
fit=summary(fit)
output = fit %>% tidy
stargazer(output)
output.2=fit.2 %>% tidy
library("ggplot2")
?ggplot
View(output)
summary(fit.2)
fit=summary(fit)
summary(fit)
fit = lm(df$Sales~df$Price+df$Urban+df$US)
summary(fit)
summary(fit.2)
confint(fit)
confint(fit.2)
confint(fit,level=0,95)
confint(fit,level=0.95)
View(output)
p = ggplot(fit.2, aes(x=term, y = estimate)) p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
View(output.2)
p = ggplot(output.2, aes(x=term, y = estimate)) p = p + geom_hline(aes(yintercept = 0), size = 2,
p = ggplot(output.2, aes(x=term, y = estimate)) p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ””) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour("white")) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour="white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p
stargazer(output)
?inner_join
??inner_join
library("dplyr")
?inner_join
library("rvest")
library("stringr")
library("purrr")
library("dplyr")
pl.table14.link = "https://en.wikipedia.org/wiki/2014-15_Premier_League"
bl.table14.link = "https://en.wikipedia.org/wiki/2014-15_Bundesliga"
ll.table14.link = "https://en.wikipedia.org/wiki/2014-15_La_Liga"
sa.table14.link = "https://en.wikipedia.org/wiki/2014-15_Serie_A"
l1.table14.link = "https://en.wikipedia.org/wiki/2014-15_Ligue_1"
css.pl.table14 = ".wikitable:nth-child(26)"
css.bl.table14 = ".wikitable:nth-child(22)"
css.ll.table14 = ".wikitable:nth-child(29)"
css.sa.table14 = ".wikitable:nth-child(28)"
css.l1.table14 = ".wikitable:nth-child(19)"
club.data = rbind(pl.table14, bl.table14, ll.table14, sa.table14, l1.table14)
pl.table14 = pl.table14.link %>%
read_html() %>%
html_node(css.pl.table14) %>%
html_table() %>%  # then convert the HTML table into a data frame
mutate(league = "Premier league") # adding a new column with the league name
bl.table14 = bl.table14.link %>%
read_html() %>%
html_node(css.bl.table14) %>%
html_table() %>%
mutate(league = "Bundesliga")
ll.table14 = ll.table14.link %>%
read_html() %>%
html_node(css.ll.table14) %>%
html_table() %>%
mutate(league = "La Liga")
sa.table14 = sa.table14.link %>%
read_html() %>%
html_node(css.sa.table14) %>%
html_table() %>%
mutate(league = "Serie A")
l1.table14 = l1.table14.link %>%
read_html() %>%
html_node(css.l1.table14) %>%
html_table() %>%
mutate(league = "Ligue 1")
club.data = rbind(pl.table14, bl.table14, ll.table14, sa.table14, l1.table14)
View(club.data)
write.table(club.data, file = "club_data_unclean.csv",
sep = ",", col.names = NA, qmethod = "double")
attach(club.data)
club.data$Status[Pos <= 5] = "Top Club"
club.data$Status[Pos <= 15 & Pos > 5] = "Middle Club"
club.data$Status[Pos >= 16] = "Buttom Club"
detach(club.data)
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Chelsea (C)"="Chelsea", "Hull City (R)"="Hull City", "Burnley"="Burnley FC", "Queens Park Rangers (R)"="QPR",
"West Bromwich"="West Brom", "Tottenham Hotspur"="Spurs","Swansea City"="Swansea",
"Manchester United"="Manchester Utd.", "West Ham United"="West Ham", "Leicester City"="Leicester",
"Newcastle "="Newcastle United")
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "West Bromwich Albion"="West Brom")
# Spanish clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Barcelona (C)"="FC Barcelona", "Valencia"="Valencia CF", "Málaga"="Málaga CF", "Elche[d](R)"="Elche CF",
"Levante"="Levante UD", "Getafe"="Getafe CF", "Deportivo"="Dep. La Coruña", "Granada"="Granada CF",
"Eibar"="SD Eibar", "Almería (R)"="UD Almería", "Córdoba (R)"="Córdoba CF", "Sevilla"="Sevilla FC",
"Villarreal" = "Villarreal CF", "Celta Vigo" = "Celta de Vigo")
# Italian clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Juventus (C)"="Juventus", "Cargliari (R)"="Cagliari Calcio", "Parma[c](R)"="Parma", "Cesena (R)"="Cesena",
"Internazionale"="Inter", "Genoa[b]"="Genoa", "Roma"="AS Roma", "Napoli"="SSC Napoli", "Milan"="AC Milan",
"Palermo"="US Palermo", "Chievo"="Chievo Verona", "Empoli"="FC Empoli", "Udinese"="Udinese Calcio",
"Cagliari (R)"="Cagliari Calcio")
# French clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Paris Saint-Germain (C)"="Paris SG", "Evian (R)"="Evian", "Metz (R)"="FC Metz", "Lyon"="Olympique Lyon",
"Bordeaux"="G. Bordeaux", "Lille"="LOSC Lille", "Nice"="OGC Nice", "Caen"="SM Caen", "Nantes"="FC Nantes",
"Lorient"="FC Lorient", "Bordeaux"="G. Bordeaux", "Lens[b](R)"="RC Lens", "Bastia"="SC Bastia")
# German Clubs
club.data$`Team v t
e`=recode(club.data$`Team v t e`, "Bayern Munich (C)"="Bayern Munich", "SC Freiburg (R)"="SC Freiburg", "SC Paderborn 07 (R)"="SC Paderborn",
"Hamburger SV (O)"="Hamburger SV", "Borussia Mönchengladbach"="Bor. M'gladbach", "Schalke 04"="FC Schalke 04",
"Bayer Leverkusen"="Bay. Leverkusen", "Eintracht Frankfurt"="E. Frankfurt", "Borussia Dortmund"="Bor. Dortmund",
"1899 Hoffenheim" = "TSG Hoffenheim", "FSV Mainz 05"="1.FSV Mainz 05")
library(plyr)
rename(club.data, "Team v t e"="TEAM")
rename(club.data, c("Team v t e"="TEAM"))
rename(club.data, c("Team v t e"="TEAM"))
library("plyr")
rename(club.data, c("Team v t e"="TEAM"))
rename(club.data, c("Team\n\nv\nt\ne"="TEAM"))
rename(club.data, c('Team v t e'="TEAM"))
club.data = read.csv("club_data_unclean.csv") # loading saved version of uncleaned club data
View(club.data)
rename(club.data, c('Team..v.t.e'="TEAM"))
names(club.data)[names(club.data)=="Team.v..t.e"] <- "Team"
View(club.data)
names(club.data)[names(club.data)=="Team..v.t.e"] <- "Team"
club.data$Team=recode(club.data$Team, "Chelsea (C)"="Chelsea", "Hull City (R)"="Hull City", "Burnley"="Burnley FC", "Queens Park Rangers (R)"="QPR",
"West Bromwich"="West Brom", "Tottenham Hotspur"="Spurs","Swansea City"="Swansea",
"Manchester United"="Manchester Utd.", "West Ham United"="West Ham", "Leicester City"="Leicester",
"Newcastle "="Newcastle United")
club.data$Team=recode(club.data$Team, "West Bromwich Albion"="West Brom")
# Spanish clubs:
club.data$Team=recode(club.data$Team, "Barcelona (C)"="FC Barcelona", "Valencia"="Valencia CF", "Málaga"="Málaga CF", "Elche[d](R)"="Elche CF",
"Levante"="Levante UD", "Getafe"="Getafe CF", "Deportivo"="Dep. La Coruña", "Granada"="Granada CF",
"Eibar"="SD Eibar", "Almería (R)"="UD Almería", "Córdoba (R)"="Córdoba CF", "Sevilla"="Sevilla FC",
"Villarreal" = "Villarreal CF", "Celta Vigo" = "Celta de Vigo")
# Italian clubs:
club.data$Team=recode(club.data$Team, "Juventus (C)"="Juventus", "Cargliari (R)"="Cagliari Calcio", "Parma[c](R)"="Parma", "Cesena (R)"="Cesena",
"Internazionale"="Inter", "Genoa[b]"="Genoa", "Roma"="AS Roma", "Napoli"="SSC Napoli", "Milan"="AC Milan",
"Palermo"="US Palermo", "Chievo"="Chievo Verona", "Empoli"="FC Empoli", "Udinese"="Udinese Calcio",
"Cagliari (R)"="Cagliari Calcio")
# French clubs:
club.data$Team=recode(club.data$Team, "Paris Saint-Germain (C)"="Paris SG", "Evian (R)"="Evian", "Metz (R)"="FC Metz", "Lyon"="Olympique Lyon",
"Bordeaux"="G. Bordeaux", "Lille"="LOSC Lille", "Nice"="OGC Nice", "Caen"="SM Caen", "Nantes"="FC Nantes",
"Lorient"="FC Lorient", "Bordeaux"="G. Bordeaux", "Lens[b](R)"="RC Lens", "Bastia"="SC Bastia")
# German Clubs
club.data$Team=recode(club.data$Team, "Bayern Munich (C)"="Bayern Munich", "SC Freiburg (R)"="SC Freiburg", "SC Paderborn 07 (R)"="SC Paderborn",
"Hamburger SV (O)"="Hamburger SV", "Borussia Mönchengladbach"="Bor. M'gladbach", "Schalke 04"="FC Schalke 04",
"Bayer Leverkusen"="Bay. Leverkusen", "Eintracht Frankfurt"="E. Frankfurt", "Borussia Dortmund"="Bor. Dortmund",
"1899 Hoffenheim" = "TSG Hoffenheim", "FSV Mainz 05"="1.FSV Mainz 05")
library("rvest")
library("stringr")
library("purrr")
library("dplyr")
library("RCurl")
library("XML")
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
setwd("~/Dropbox/Universitet/SocialDataScience/SDS-group12/Exam_project")
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
club.data = read.csv("club_data_unclean.csv", encoding="latin1") # loading saved version of uncleaned club data
club.data = read.csv("player_data_unclean.csv", encoding="latin1") # loading saved version of uncleaned club data
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
transfer.data = subset(transfer.data, select=-c(X.1, X.2,X))
?lm
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
set.seed(123)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
train_sample = transfer.data[train.indicator, ] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, ] # selecting observations without a train indicator
View(train_sample)
install.packages("caret")
##================ 4.2 Create evaluation function  ================
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
estimate_M1 = mean(train_sample$transfer.fee)
get.rmse(mean(test_sample$transfer.fee, estimate_M1)
result.model1 = get.rmse(mean(test_sample$transfer.fee), train_sample$transfer.fee)
get.rmse(mean(test_sample$transfer.fee, estimate_M1)
get.rmse(mean(test_sample$transfer.fee, estimate_M1))
estimate_M1 = mean(train_sample$transfer.fee)
estimate_M1
sum(transfer.data=="0")
sum(transfer.data==0)
sum(transfer.data$transfer.fee==0)
sum(transfer.data$contract.left.month==NA)
sum(transfer.data$contract.left.month!=NA)
sum(transfer.data$contract.left.month!="NA")
#install.packages("caret")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
