post(fit, file = "c:/tree2.ps",
title = "Regression Tree for Transfer.fees ")
Model_4_fit<- prune(Model_4, cp=0.01160389) # from cptable
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.8)
Model_4_fit<- prune(Model_4, cp=0.01160389) # from cptable
# plot the pruned tree
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.8)
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
get.rmse(estimate_M4,test_sample$transfer.fee)
estimate_M42 = predict(Model_4, test_sample)
get.rmse(estimate_M42,test_sample$transfer.fee)
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
plot(Model_4, uniform=TRUE,
main="Regression Tree for Transfer.fees ")
text(Model_4, use.n=TRUE, all=TRUE, cex=.3)
printcp(Model_4)
plotcp(Model_4)
Model_4_fit<- prune(Model_4, cp=0.022845) # from cptable
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
Model_4_fit<- prune(Model_4, cp=0.022845, "CP") # from cptable
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
rsq.rpart(Model_4) # visualize cross-validation results
printcp(Model_4)
plotcp(Model_4)
cp_1=Model_4$cptable[which.min(Model_4$cptable[,”xerror”]),”CP”]
cp_1=Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
Model_4_fit<- prune(Model_4, cp=cp_1, "CP") # from cptable
plot(Model_4_fit, uniform=TRUE,
main="Pruned Regression Tree for Transfer.fee")
text(Model_4_fit, use.n=TRUE, all=TRUE, cex=.3)
estimate_M4 = predict(Model_4_fit, test_sample)
get.rmse(estimate_M4,test_sample$transfer.fee)
#install.packages("tree")
library("tree")
install.packages("tree")
library("tree")
Model_4=tree(formula = transfer.fee ∼positions+transferage+
league+Status+
#searchresults+
contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(formula = transfer.fee ∼positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(formula = transfer.fee ∼ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(transfer.fee ∼ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4=tree(transfer.fee~ positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
Model_4
summary(Model_4)
plot(tree.boston)
text(tree.boston ,pretty=0)
plot(Model_4)
text(Model_4 ,pretty=0)
cv.Model_4=cv.tree(Model_4)
plot(ccv.Model_4$size ,cv.Model_4$dev ,type=’b’)
plot(ccv.Model_4$size ,cv.Model_4$dev ,type='b')
plot(ccv.Model_4$size,cv.Model_4$dev ,type='b')
plot(cv.Model_4$size,cv.Model_4$dev ,type='b')
?cv.tree
cv.Model_4=cv.tree(Model_4)
cv.Model_4
plot(cv.Model_4$size,cv.Model_4$dev ,type='b')
?cv.tree
cv.Model_4
summary(cv.Model_4)
summary(Model_4)
?prune
?prune.tree
prune.tree(Model_4)
prune.Model_4=prune.tree(Model_4)
predict(prune.Model_4,test_sample)
predict(cv.Model_4,test_sample)
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+
#searchresults+
contract.left.month+total.goals+appearances, data=train_sample)
Model_4$cptable
alpha <- fit0$cptable[which.min(fit0$cptable[,"xerror"]),"CP"]
alpha <-Model_40$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
prune.Model_4 <- prune(fit0,alpha)
prune.Model_4 <- prune(Model_4,alpha)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~positions+transferage+
league+Status+contract.left.month+total.goals+appearances, data=train_sample)
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
printcp(Model_4)
summary(Model_4)
##Pruning the tree
prune.Model_4 <- prune(Model_4,alpha)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4)
text(prune.Model_4)
plot(prune.Model_4, uniform=TRUE, branch=0.6, margin=0.05)
text(prune.Model_4, all=TRUE, use.n=TRUE)
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.final.csv", encoding = "UTF8", header = TRUE)
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults","Status")
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
View(test_sample)
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
ransferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
View(transfer.data)
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
test.data=select(transfer.data , is.na(contract.left.month) == FALSE)
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
test.data=select(transfer.data , is.na(contract.left.month) == FALSE)
View(transfer.data)
test.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
View(test_sample)
test.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
View(test.data)
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
View(train_sample)
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
estimate_M1
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
transfer.data$transferage_sq = transfer.data$transferage^2
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults","transferage_sq")
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month",
"league", "Status", "searchresults","transferage_sq")
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
Model_2 = lm(transfer.fee ~ ., data = (train_sample)) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", "appearances", "total.goals", "total.assists",
"total.minutes.played", "contract.left.month","transferage",
"league", "Status", "searchresults","transferage_sq")
## Removing observations where contract lenght is unknown
transfer.data=filter(transfer.data , is.na(contract.left.month) == FALSE)
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to enable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator,predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
#create new data frame
train_sample.1<- train_sample %>%
select(transfer.fee,league)
train_sample.1<- train_sample.1%>%
mutate(index=1:487)
#creating GGplot for visualisation
p = ggplot(train_sample.1, aes(x = index , y = transfer.fee))+
geom_segment(aes(x= index, xend=index, y=transfer.fee, yend=estimate_M1), color="red") +
geom_point(aes(x = index, y = transfer.fee, color = "black"))   +
geom_line(aes(x = index, y = estimate_M1), color="green", size =1)+
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
text=element_text(family="Goudy Old Style"))
gg <- ggplotly(p)  #using plotly to make it interactive
gg
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
install.packages("ggplotly")
install.packages("plotly")
library(plotly)
train_sample.1<- train_sample %>%
select(transfer.fee,league)
train_sample.1<- train_sample.1%>%
mutate(index=1:487)
#creating GGplot for visualisation
p = ggplot(train_sample.1, aes(x = index , y = transfer.fee))+
geom_segment(aes(x= index, xend=index, y=transfer.fee, yend=estimate_M1), color="red") +
geom_point(aes(x = index, y = transfer.fee, color = "black"))   +
geom_line(aes(x = index, y = estimate_M1), color="green", size =1)+
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
text=element_text(family="Goudy Old Style"))
#create new data frame
train_sample.1<- train_sample %>%
select(transfer.fee,league)
train_sample.1<- train_sample.1%>%
mutate(index=1:258)
#creating GGplot for visualisation
p = ggplot(train_sample.1, aes(x = index , y = transfer.fee))+
geom_segment(aes(x= index, xend=index, y=transfer.fee, yend=estimate_M1), color="red") +
geom_point(aes(x = index, y = transfer.fee, color = "black"))   +
geom_line(aes(x = index, y = estimate_M1), color="green", size =1)+
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks= element_line(color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
text=element_text(family="Goudy Old Style"))
gg <- ggplotly(p)  #using plotly to make it interactive
gg
Model_2 = lm(transfer.fee ~ ., data = (train_sample))
estimate_M2 = predict(Model_2, test_sample)
get.rmse(test_sample$transfer.fee, estimate_M2)
RegressorMatrix_train=model.matrix(~ ., train_sample)
View(RegressorMatrix_train)
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
RegressorMatrix_test=model.matrix(~.,test_sample)
View(RegressorMatrix_test)
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
RegressorMatrix_train=model.matrix(transfer.fee~ ., train_sample)
RegressorMatrix_test=model.matrix(transfer.fee~.,test_sample)
View(RegressorMatrix_test)
Model_3 = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
Model_3
lambda_values = Model_3$lambda
performance_Lasso = data.frame()
for (lambda in lambda_values){
performance_Lasso = rbind(performance_Lasso,
data.frame(lambda = lambda,
RMSError = get.rmse(predict(Model_3, RegressorMatrix_test, s = lambda),
test_sample$transfer.fee)))
}
performance_Lasso
ggplot(performance_Lasso, aes(x = lambda, y = RMSError))+
geom_point() +
geom_line() +
theme_minimal()
best.lambda = performance_Lasso$lambda[performance_Lasso$RMSError == min(performance_Lasso$RMSError)]
coef(Model_3, s = best.lambda)
Estimate_M3=predict(Model_3, RegressorMatrix_test
get.rmse(Estimate_M3, s=best.lambda), test_sample$transfer.fee)
Estimate_M3=predict(Model_3, RegressorMatrix_test, s=best.lambda)
get.rmse(Estimate_M3, test_sample$transfer.fee)
get.rmse(test_sample$transfer.fee, estimate_M2)
Model_4=rpart(formula=transfer.fee~., data=train_sample)
library("rpart")
Model_4=rpart(formula=transfer.fee~., data=train_sample)
Model_4$cptable
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
printcp(Model_4)
summary(Model_4)
plot(Model_4)
text(Model_4)
plot(prune.Model_4, uniform=TRUE, branch=0.6, margin=0.05)
text(prune.Model_4, all=TRUE, use.n=TRUE)
prune.Model_4 <- prune(Model_4,alpha)
plot(prune.Model_4, uniform=TRUE, branch=0.6, margin=0.05)
text(prune.Model_4, all=TRUE, use.n=TRUE)
estimate_M4=predict(prune.Model_4,train_sample)
estimate_M4
estimate_M4=predict(prune.Model_4,test_sample)
estimate_M4
estimate_M4=predict(Model_4,test_sample)
estimate_M4
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
library("glmnet")
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
library("rpart")
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
library("rpart.plot")
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
prune.Model_4 <- prune(Model_4,alpha)
estimate_M4.1=predict.rpart(prune.Model_4,test_sample)
estimate_M4.1=predict(prune.Model_4,test_sample)
estimate_M4.1=predict(prune.Model_4,test_sample, type=vector)
estimate_M4.1=predict(prune.Model_4,test_sample, type="vector")
estimate_M4.1=predict(prune.Model_4,test_sample, type="vector")
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
?rpart
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=alpha))
prune.Model_4
Estimate_M4=predict(prune.Model_4,test_sample)
get.rmse(test_sample$transfer.fee,Estimate_M4)
par(mar=c(4,4,4,4))
prp(prune.Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
prune.Model_4
Model_4$cptable
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp="alpha"))
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=alpha))
alpha
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=0.01338981))
prune.Model_4
png("spactree9.png", width = 1200, height = 800)
post(spac.tree9, file = "", title. = "Classifying transfer fee, 7 splits",
bp = 18)
dev.off()
png("spactree9.png", width = 1200, height = 800)
p=png("spactree9.png", width = 1200, height = 800)
p
prune.Model_4
Model_4$cptable
prune.Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample,control=rpart.control(cp=0.000000001))
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
d
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
alpha <-Model_4$cptable[which.min(Model_4$cptable[,"xerror"]),"CP"]
alpha
##Pruning the tree - optimal tree is the same as before
prune.Model_4 <- rpart(transfer.fee~.,method="anova", data=train_sample, control=rpart.control(cp=0.01338981))
prune.Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4$cptable
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample)
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample,control=rpart.control(cp=0.000000001))
Model_4$cptable
prp(Model_4 ,fallen.leaves=TRUE , type=0)
par(mar=c(4,4,4,4))
prp(Model_4 ,fallen.leaves=TRUE , type=0)
Model_4=rpart(formula=transfer.fee~.,method="anova", data=train_sample,control=rpart.control(cp=0.000000001))
Model_4$cptable
library("tree")
Model_4=tree(formula=transfer.fee~.,data=train_sample)
summary(Model_4)
plot(Model_4)
plot(Model_4)
p=plot(Model_4)
p
install.packages("ISLR")
library("ISLR")
plot(Model_4)
plot(Model_4)
library(caret)
library(plotly)
library(ggplot2)
library(glmnet)
library(dplyr)
library(plotly)
plot(Model_4)
p=plot(Model_4)
p
p=plot(Model_4)
p
Model_4=tree(formula=transfer.fee~.,data=train_sample)
summary(Model_4)
Model_4=tree(formula=transfer.fee~.,data=train_sample)
summary(Model_4)
Model_4=rpart(formula=transfer.fee~.,data=train_sample)
Model_4
Model_4$cptable
plot(tree.Model_4)
tree.Model_4=tree(formula=transfer.fee~.,data=train_sample)
plot(tree.Model_4)
?plot
plot.tree(tree.Model_4)
library("tree")
plot.tree(tree.Model_4)
plot.tree(tree.Model_4)
text(tree.Model_4,pretty=0)
plot(tree.Model_4)
text(tree.Model_4,pretty=0)
plot(tree.Model_4)
text(tree.Model_4,pretty=0)
cv.Model_4=cv.tree(Model_4)
Model_4=tree(transfer.fee~.,data=train_sample)
summary(Model_4)
cv.Model_4=cv.tree(Model_4)
plot(cv.Model_4$size,cv.Model_4$dev,type=’b’)
plot(cv.Model_4$size,cv.Model_4$dev,type='b')
