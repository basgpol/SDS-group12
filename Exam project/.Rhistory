summary(fit.2)
output.1 = fit %>% tidy
library("tidyr")
output.1 = fit %>% tidy
library("ISLR")
library("Dplyr")
library("tidyr")
df = Carseats
fit = lm(df$Sales~df$Price+df$Urban+df$US)
summary(fit)
output.1 = fit %>% tidy
output = fit %>% tidy
fit.1=summary(fit)
output = fit.1 %>% tidy
install.packages("library")
install.packages("stargazer")
library("stargazer")
stargazer(fit.1)
install.packages("broom")
library("broom")
fit=summary(fit)
output = fit %>% tidy
stargazer(output)
output.2=fit.2 %>% tidy
library("ggplot2")
?ggplot
View(output)
summary(fit.2)
fit=summary(fit)
summary(fit)
fit = lm(df$Sales~df$Price+df$Urban+df$US)
summary(fit)
summary(fit.2)
confint(fit)
confint(fit.2)
confint(fit,level=0,95)
confint(fit,level=0.95)
View(output)
p = ggplot(fit.2, aes(x=term, y = estimate)) p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
View(output.2)
p = ggplot(output.2, aes(x=term, y = estimate)) p = p + geom_hline(aes(yintercept = 0), size = 2,
p = ggplot(output.2, aes(x=term, y = estimate)) p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) + geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ”white”) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = ””) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour = "white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour("white")) +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p = ggplot(output.2, aes(x=term, y = estimate))
p = p + geom_hline(aes(yintercept = 0), size = 2,
colour="white") +
geom_point() +
geom_errorbar(aes(ymin=estimate-2*std.error, ymax=estimate+2*std.error)) +
coord_flip()
p
stargazer(output)
?inner_join
??inner_join
library("dplyr")
?inner_join
library("rvest")
library("stringr")
library("purrr")
library("dplyr")
pl.table14.link = "https://en.wikipedia.org/wiki/2014-15_Premier_League"
bl.table14.link = "https://en.wikipedia.org/wiki/2014-15_Bundesliga"
ll.table14.link = "https://en.wikipedia.org/wiki/2014-15_La_Liga"
sa.table14.link = "https://en.wikipedia.org/wiki/2014-15_Serie_A"
l1.table14.link = "https://en.wikipedia.org/wiki/2014-15_Ligue_1"
css.pl.table14 = ".wikitable:nth-child(26)"
css.bl.table14 = ".wikitable:nth-child(22)"
css.ll.table14 = ".wikitable:nth-child(29)"
css.sa.table14 = ".wikitable:nth-child(28)"
css.l1.table14 = ".wikitable:nth-child(19)"
club.data = rbind(pl.table14, bl.table14, ll.table14, sa.table14, l1.table14)
pl.table14 = pl.table14.link %>%
read_html() %>%
html_node(css.pl.table14) %>%
html_table() %>%  # then convert the HTML table into a data frame
mutate(league = "Premier league") # adding a new column with the league name
bl.table14 = bl.table14.link %>%
read_html() %>%
html_node(css.bl.table14) %>%
html_table() %>%
mutate(league = "Bundesliga")
ll.table14 = ll.table14.link %>%
read_html() %>%
html_node(css.ll.table14) %>%
html_table() %>%
mutate(league = "La Liga")
sa.table14 = sa.table14.link %>%
read_html() %>%
html_node(css.sa.table14) %>%
html_table() %>%
mutate(league = "Serie A")
l1.table14 = l1.table14.link %>%
read_html() %>%
html_node(css.l1.table14) %>%
html_table() %>%
mutate(league = "Ligue 1")
club.data = rbind(pl.table14, bl.table14, ll.table14, sa.table14, l1.table14)
View(club.data)
write.table(club.data, file = "club_data_unclean.csv",
sep = ",", col.names = NA, qmethod = "double")
attach(club.data)
club.data$Status[Pos <= 5] = "Top Club"
club.data$Status[Pos <= 15 & Pos > 5] = "Middle Club"
club.data$Status[Pos >= 16] = "Buttom Club"
detach(club.data)
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Chelsea (C)"="Chelsea", "Hull City (R)"="Hull City", "Burnley"="Burnley FC", "Queens Park Rangers (R)"="QPR",
"West Bromwich"="West Brom", "Tottenham Hotspur"="Spurs","Swansea City"="Swansea",
"Manchester United"="Manchester Utd.", "West Ham United"="West Ham", "Leicester City"="Leicester",
"Newcastle "="Newcastle United")
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "West Bromwich Albion"="West Brom")
# Spanish clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Barcelona (C)"="FC Barcelona", "Valencia"="Valencia CF", "Málaga"="Málaga CF", "Elche[d](R)"="Elche CF",
"Levante"="Levante UD", "Getafe"="Getafe CF", "Deportivo"="Dep. La Coruña", "Granada"="Granada CF",
"Eibar"="SD Eibar", "Almería (R)"="UD Almería", "Córdoba (R)"="Córdoba CF", "Sevilla"="Sevilla FC",
"Villarreal" = "Villarreal CF", "Celta Vigo" = "Celta de Vigo")
# Italian clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Juventus (C)"="Juventus", "Cargliari (R)"="Cagliari Calcio", "Parma[c](R)"="Parma", "Cesena (R)"="Cesena",
"Internazionale"="Inter", "Genoa[b]"="Genoa", "Roma"="AS Roma", "Napoli"="SSC Napoli", "Milan"="AC Milan",
"Palermo"="US Palermo", "Chievo"="Chievo Verona", "Empoli"="FC Empoli", "Udinese"="Udinese Calcio",
"Cagliari (R)"="Cagliari Calcio")
# French clubs:
club.data$`Team
v
t
e`=recode(club.data$`Team
v
t
e`, "Paris Saint-Germain (C)"="Paris SG", "Evian (R)"="Evian", "Metz (R)"="FC Metz", "Lyon"="Olympique Lyon",
"Bordeaux"="G. Bordeaux", "Lille"="LOSC Lille", "Nice"="OGC Nice", "Caen"="SM Caen", "Nantes"="FC Nantes",
"Lorient"="FC Lorient", "Bordeaux"="G. Bordeaux", "Lens[b](R)"="RC Lens", "Bastia"="SC Bastia")
# German Clubs
club.data$`Team v t
e`=recode(club.data$`Team v t e`, "Bayern Munich (C)"="Bayern Munich", "SC Freiburg (R)"="SC Freiburg", "SC Paderborn 07 (R)"="SC Paderborn",
"Hamburger SV (O)"="Hamburger SV", "Borussia Mönchengladbach"="Bor. M'gladbach", "Schalke 04"="FC Schalke 04",
"Bayer Leverkusen"="Bay. Leverkusen", "Eintracht Frankfurt"="E. Frankfurt", "Borussia Dortmund"="Bor. Dortmund",
"1899 Hoffenheim" = "TSG Hoffenheim", "FSV Mainz 05"="1.FSV Mainz 05")
library(plyr)
rename(club.data, "Team v t e"="TEAM")
rename(club.data, c("Team v t e"="TEAM"))
rename(club.data, c("Team v t e"="TEAM"))
library("plyr")
rename(club.data, c("Team v t e"="TEAM"))
rename(club.data, c("Team\n\nv\nt\ne"="TEAM"))
rename(club.data, c('Team v t e'="TEAM"))
club.data = read.csv("club_data_unclean.csv") # loading saved version of uncleaned club data
View(club.data)
rename(club.data, c('Team..v.t.e'="TEAM"))
names(club.data)[names(club.data)=="Team.v..t.e"] <- "Team"
View(club.data)
names(club.data)[names(club.data)=="Team..v.t.e"] <- "Team"
club.data$Team=recode(club.data$Team, "Chelsea (C)"="Chelsea", "Hull City (R)"="Hull City", "Burnley"="Burnley FC", "Queens Park Rangers (R)"="QPR",
"West Bromwich"="West Brom", "Tottenham Hotspur"="Spurs","Swansea City"="Swansea",
"Manchester United"="Manchester Utd.", "West Ham United"="West Ham", "Leicester City"="Leicester",
"Newcastle "="Newcastle United")
club.data$Team=recode(club.data$Team, "West Bromwich Albion"="West Brom")
# Spanish clubs:
club.data$Team=recode(club.data$Team, "Barcelona (C)"="FC Barcelona", "Valencia"="Valencia CF", "Málaga"="Málaga CF", "Elche[d](R)"="Elche CF",
"Levante"="Levante UD", "Getafe"="Getafe CF", "Deportivo"="Dep. La Coruña", "Granada"="Granada CF",
"Eibar"="SD Eibar", "Almería (R)"="UD Almería", "Córdoba (R)"="Córdoba CF", "Sevilla"="Sevilla FC",
"Villarreal" = "Villarreal CF", "Celta Vigo" = "Celta de Vigo")
# Italian clubs:
club.data$Team=recode(club.data$Team, "Juventus (C)"="Juventus", "Cargliari (R)"="Cagliari Calcio", "Parma[c](R)"="Parma", "Cesena (R)"="Cesena",
"Internazionale"="Inter", "Genoa[b]"="Genoa", "Roma"="AS Roma", "Napoli"="SSC Napoli", "Milan"="AC Milan",
"Palermo"="US Palermo", "Chievo"="Chievo Verona", "Empoli"="FC Empoli", "Udinese"="Udinese Calcio",
"Cagliari (R)"="Cagliari Calcio")
# French clubs:
club.data$Team=recode(club.data$Team, "Paris Saint-Germain (C)"="Paris SG", "Evian (R)"="Evian", "Metz (R)"="FC Metz", "Lyon"="Olympique Lyon",
"Bordeaux"="G. Bordeaux", "Lille"="LOSC Lille", "Nice"="OGC Nice", "Caen"="SM Caen", "Nantes"="FC Nantes",
"Lorient"="FC Lorient", "Bordeaux"="G. Bordeaux", "Lens[b](R)"="RC Lens", "Bastia"="SC Bastia")
# German Clubs
club.data$Team=recode(club.data$Team, "Bayern Munich (C)"="Bayern Munich", "SC Freiburg (R)"="SC Freiburg", "SC Paderborn 07 (R)"="SC Paderborn",
"Hamburger SV (O)"="Hamburger SV", "Borussia Mönchengladbach"="Bor. M'gladbach", "Schalke 04"="FC Schalke 04",
"Bayer Leverkusen"="Bay. Leverkusen", "Eintracht Frankfurt"="E. Frankfurt", "Borussia Dortmund"="Bor. Dortmund",
"1899 Hoffenheim" = "TSG Hoffenheim", "FSV Mainz 05"="1.FSV Mainz 05")
library("rvest")
library("stringr")
library("purrr")
library("dplyr")
library("RCurl")
library("XML")
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
setwd("~/Dropbox/Universitet/SocialDataScience/SDS-group12/Exam_project")
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
club.data = read.csv("club_data_unclean.csv", encoding="latin1") # loading saved version of uncleaned club data
club.data = read.csv("player_data_unclean.csv", encoding="latin1") # loading saved version of uncleaned club data
player.data.cleaning = read.csv("player_data_unclean.csv", encoding = "Latin1") # loading saved version of uncleaned player data
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
transfer.data = subset(transfer.data, select=-c(X.1, X.2,X))
?lm
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
set.seed(123)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
train_sample = transfer.data[train.indicator, ] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, ] # selecting observations without a train indicator
View(train_sample)
install.packages("caret")
##================ 4.2 Create evaluation function  ================
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
estimate_M1 = mean(train_sample$transfer.fee)
get.rmse(mean(test_sample$transfer.fee, estimate_M1)
result.model1 = get.rmse(mean(test_sample$transfer.fee), train_sample$transfer.fee)
get.rmse(mean(test_sample$transfer.fee, estimate_M1)
get.rmse(mean(test_sample$transfer.fee, estimate_M1))
estimate_M1 = mean(train_sample$transfer.fee)
estimate_M1
sum(transfer.data=="0")
sum(transfer.data==0)
sum(transfer.data$transfer.fee==0)
sum(transfer.data$contract.left.month==NA)
sum(transfer.data$contract.left.month!=NA)
sum(transfer.data$contract.left.month!="NA")
Model_2 = lm(train_sample$transfer.fee ~ train_sample$Status + train_sample$age+ train_sample$position)  # generating linear model on training data
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
## http://stats.stackexchange.com/questions/103459/how-do-i-know-which-method-of-cross-validation-is-best
##
#install.packages("caret")
library(caret)
library(plotly)
library(ggplot2)
## Loading the final data set
transfer.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Exam_project/transferdata.tidy.csv", encoding = "UTF8", header = TRUE)
## creating a vector with selected predictors for transferfee ()
predicting.var = c("transfer.fee", "positions", #"nationality",
"appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
##================ 4.1 Dividing into a train and test sample  ================
## Creating a vector with the count of 70 pct. of the sample size
train_size = floor(0.70 * nrow(transfer.data)) # creates a vector
## setting seed to inable reproductivity
set.seed(123)
## creating a vector with random numbers (count = tran_size)
train.indicator = sample(seq_len(nrow(transfer.data)), size = train_size)
## Splitting the data frame into a train (70 pct.) and test sample (30 pct.)
train_sample = transfer.data[train.indicator, predicting.var] # selecting observations with a train indicator
test_sample = transfer.data[-train.indicator, predicting.var] # selecting observations without a train indicator
##================ 4.2 Create evaluation function  ================
## creating a function that calculate the RMSE
get.rmse = function(real, estimate){
return(sqrt(mean((real - estimate)^2)))
}
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
Model_2 = lm(train_sample$transfer.fee ~ train_sample$Status + train_sample$age+ train_sample$position)  # generating linear model on training data
summary(Model_2)
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
estimate_M2
get.rmse(test_sample$transfer.fee, estimate_M2)
estimate_M1 = mean(train_sample$transfer.fee) #calculating estimate from model 1
get.rmse(test_sample$transfer.fee, estimate_M1) # calculating RMSE from estimate on test sample
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$searchresults) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
estimate_M2
get.rmse(test_sample$transfer.fee, estimate_M2)
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$searchresults+train_sample$league) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
estimate_M2
get.rmse(test_sample$transfer.fee, estimate_M2)
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$searchresults+train_sample$league+train_sample$total.goals) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
estimate_M2
get.rmse(test_sample$transfer.fee, estimate_M2)
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$searchresults+train_sample$league+train_sample$appearances) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
estimate_M2
get.rmse(test_sample$transfer.fee, estimate_M2)
estimate_M2
Model_2 = lm(train_sample$transfer.fee~ train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$searchresults+train_sample$league) # generating linear model on training data
summary(Model_2)
estimate_M2 = predict(Model_2, test_sample)
estimate_M2
get.rmse(test_sample$transfer.fee, estimate_M2)
predicting.var = c("transfer.fee", "positions", #"nationality",
predicting.var = c("transfer.fee", "positions", #"nationality",
"appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")
RegressorMatrix_train = as.matrix(Regressor_matrix["predicting.var",])
RegressorMatrix_train = as.matrix(Regressor_matrix[predicting.var,])
?as.matrix
RegressorMatrix_train = as.matrix(test_sample)
RegressorMatrix_train = as.matrix(train_sample)
RegressorMatrix_test = as.matrix(test_sample)
?df
Regressors=df(train_sample$positions+train_sample$Status+train_sample$transferage+train_sample$searchresults+train_sample$league)
Regressors=df(train_sample$positions,train_sample$Status,train_sample$transferage,train_sample$searchresults,train_sample$league)
RegressorMatrix_train = as.matrix(train_sample[,c("transfer.fee", "positions", #"nationality",
"appearances", "total.goals", "total.assists",
"minutes.pr.goal", "total.minutes.played", "contract.left.month", "transferage",
"league", "Status", "searchresults")])
RegressorMatrix_train = as.matrix(train_sample[,c("positions", #"nationality",
"league", "Status", "searchresults")])
M3_Lasso = glmnet(x = RegressorMatrix_train, y = test_sample$transfer.fee)
install.packages("glmnet")
M3_Lasso = glmnet(x = RegressorMatrix_train, y = test_sample$transfer.fee)
library("glmnet")
M3_Lasso = glmnet(x = RegressorMatrix_train, y = test_sample$transfer.fee)
M3_Lasso = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
RegressorMatrix_train = as.matrix(train_sample[,c("positions", "transferage",
RegressorMatrix_train = as.matrix(train_sample[,c("positions", "transferage",
"league", "Status", "searchresults")])
RegressorMatrix_test = as.matrix(test_sample)[,c("positions", "transferage",
"league", "Status", "searchresults")])
M3_Lasso = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
View(RegressorMatrix_test)
RegressorMatrix_train = as.matrix(train_sample[,c("positions", "transferage",
"league", "Status", "searchresults")])
RegressorMatrix_test = as.matrix(test_sample)[,c("positions", "transferage",
"league", "Status", "searchresults")])
M3_Lasso = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
RegressorMatrix_test = as.matrix(test_sample[,c("positions", "transferage",
"league", "Status", "searchresults")])
M3_Lasso = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
RegressorMatrix_train
View(RegressorMatrix_train)
M3_Lasso = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
lm1b <- glmmLasso(transfer.fee~ positions+Status+transferage+searchresults+league, rnd = NULL,
lambda=10, data = train_sample)
install.packages("glmmLasso")
library("glmmLasso")
lm1b <- glmmLasso(transfer.fee~ positions+Status+transferage+searchresults+league, rnd = NULL,
lambda=10, data = train_sample)
summary(lm1b)
Model_3 <- glmmLasso(transfer.fee~ positions+Status+transferage+searchresults+league, rnd = NULL,
lambda=10, data = train_sample)
?write.table
estimate_M3 = predict(Model_3, test_sample)
View(estimate_M3)
get.rmse(test_sample$transfer.fee, estimate_M2)
View(train_sample)
library("readr")
library("rvest")
library("stringr")
library("purrr")
library("dplyr")
setwd("~/Dropbox/Universitet/SocialDataScience/SDS-group12/Exam project")
partlyclean=read_csv("player_data_partclean.csv")
GoogleHits <- function(input)  #Function that seach for the input specified
{
require(XML)
require(RCurl)
input = gsub(" ", "+", input)
#url <- paste("https://www.google.com/search?q=\"",
#             input, "\"", sep = "")
url = paste0("https://www.google.com/search?q=",
input)
CAINFO = paste(system.file(package="RCurl"), "/CurlSSL/ca-bundle.crt", sep = "")
script <- getURL(url, followlocation = TRUE, cainfo = CAINFO)
doc <- htmlParse(script)
res <- xpathSApply(doc, '//*/div[@id="resultStats"]', xmlValue)
cat(paste("\nYour Search URL:\n", url, "\n", sep = ""))
#cat("\nNo. of Hits:\n")
return(as.integer(gsub("[^0-9]", "", res)))
}
partlyclean.test=partlyclean[1:5,]
search.1=dQuote(partlyclean.test$name)  #Put quotation marks around name of the player
search.2=paste(search.1,"footballer",partlyclean.test$nationality[1:5], sep=" ") #Paste name of footballer, the word footballer and nationality
search.2=paste(search.1,"footballer", sep=" ") #Paste name of footballer, the word footballer and nationality
search.2
partlyclean.test$searchresults=unlist(lapply(search.2, GoogleHits)) #New column reporting number of search results
search.2=paste(search.1,"footballer", sep=" ") #Paste name of footballer, the word footballer and nationality
GoogleHits <- function(input)
{
require(XML)
require(RCurl)
url <- paste("https://www.google.com/search?q=\"",
input, "\"", sep = "")
CAINFO = paste(system.file(package="RCurl"), "/CurlSSL/ca-bundle.crt", sep = "")
script <- getURL(url, followlocation = TRUE, cainfo = CAINFO)
doc <- htmlParse(script)
res <- xpathSApply(doc, '//*/div[@id="resultStats"]', xmlValue)
cat(paste("\nYour Search URL:\n", url, "\n", sep = ""))
cat("\nNo. of Hits:\n")
return(as.integer(gsub("[^0-9]", "", res)))
}
# Example:
GoogleHits("R%Statistical%Software")
l=GoogleHits("R%Statistical%Software")
l=GoogleHits("R%Statistical%Software")
library("rvest")
GoogleHits <- function(input)
{
require(XML)
require(RCurl)
url <- paste("https://www.google.com/search?q=\"",
input, "\"", sep = "")
CAINFO = paste(system.file(package="RCurl"), "/CurlSSL/ca-bundle.crt", sep = "")
script <- getURL(url, followlocation = TRUE, cainfo = CAINFO)
doc <- htmlParse(script)
res <- xpathSApply(doc, '//*/div[@id="resultStats"]', xmlValue)
cat(paste("\nYour Search URL:\n", url, "\n", sep = ""))
cat("\nNo. of Hits:\n")
return(as.integer(gsub("[^0-9]", "", res)))
}
# Example:
l=GoogleHits("R%Statistical%Software")
summary(train_sample$positions)
Model_3 <- glmmLasso(transfer.fee~ positions+Status+transferage+searchresults+league, rnd = NULL,
lambda=10, data = train_sample)
summary(lm1b)
?`SparseM-coerce-methods`
model.matrix(train_sample[,c("positions", "transferage",
"league", "Status", "searchresults")])
model.matrix(train_sample)
?model.matrix
model.matrix(~ positions+transferage+
league+Status+searchresults, train_sample)
train_sample_dummies=model.matrix(~ positions+transferage+
league+Status+searchresults, train_sample)
View(train_sample_dummies)
RegressorMatrix_train=model.matrix(~ positions+transferage+
league+Status+searchresults, train_sample)
M3_Lasso = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
summary(M3_Lasso)
M3_Lasso
estimate_M3 = predict(M3_Lasso, test_sample)
RegressorMatrix_test = as.matrix(test_sample[,c("positions", "transferage",
"league", "Status", "searchresults")])
estimate_M3 = predict(M3_Lasso, RegressorMatrix_test)
RegressorMatrix_train=model.matrix(~ positions+transferage+
league+Status+searchresults, train_sample)
RegressorMatrix_test = as.matrix(test_sample[,c("transfer.fee","positions", "transferage",
"league", "Status", "searchresults")])
M3_Lasso = glmnet(x = RegressorMatrix_train, y = train_sample$transfer.fee)
estimate_M3 = predict(M3_Lasso, RegressorMatrix_test)
?gmlnet
?glmnet
RegressorMatrix_train=model.matrix(~ transfer.fee, train_sample)
View(RegressorMatrix_train)
RegressorMatrix_train=model.matrix(~ transfer.fee+transferage+
league+Status+searchresults, train_sample)
View(RegressorMatrix_train)
estimate_M3 = predict(M3_Lasso, RegressorMatrix_test)
summary(train_sample$positions)
