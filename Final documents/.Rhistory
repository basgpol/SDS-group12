transfer.path1<-dplyr::left_join(transfer.data, transfer.path.origin, by = "club.from")
View(transfer.data)
View(transfer.path.origin)
View(transfer.path.origin)
transfer.path1<-dplyr::left_join(transfer.data, transfer.path.origin, by = "club.from")
transfer.path1<-dplyr::left_join(transfer.data, transfer.path.origin, by = "club.from")
View(transfer.data.geo)
#Getting data from df
player.data = read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Latest%20transferdata/transferdata16.final.csv", header=TRUE, stringsAsFactors=TRUE, fileEncoding="UTF8") # loading saved version of uncleaned player data
transfer.data = player.data
# transfer.data <- transfer.data[sample(1:nrow(transfer.data), 50,# taking a random 50 sample
#                           replace=FALSE),]
#transfer.path.origin= data.frame(rep(i, nrow(transfer.data)), transfer.data$V1, transfer.data$lon, transfer.data$lat) #creating a dataset with destination coordinates
transfer.path.origin= data.frame( player.data.geo$club.from, geocodes.club.from$lon, geocodes.club.from$lat) #creating a dataset with destination coordinates
colnames(transfer.path.origin)[1] <- "club.from"#change "club.from"
###CODE that takes the geocode from 1st visualisation
#transfer path destination
colnames(transfer.data)[2] <- "team"#change "club to" to "team"
#TEAM
transfer.data$team = str_replace(transfer.data$team,"[1234567890]","")#removing the unwanted numbers*3 because it only take one out at a time
transfer.data$team = str_replace(transfer.data$team,"[1234567890]","")
transfer.data$team = str_replace(transfer.data$team,"[1234567890]","")
transfer.data$team = str_replace(transfer.data$team,"[1234567890]","")
transfer.data$team = str_replace(transfer.data$team,"*\\[.*?\\] *","")#removing the unwanted characters between brackets
transfer.data$team = str_replace(transfer.data$team,"Borussia Mönchengladbach","Mönchengladbach Borussia")
transfer.data$team = str_replace(transfer.data$team,"FC Augsburg","Augsburg FC")
transfer.data$team = str_replace(transfer.data$team,"FC Köln","Cologne FC RheinEnergieStadion")
transfer.data$team = str_replace(transfer.data$team,"VfB Stuttgart","Stuttgart VfB")
transfer.data$team = str_replace(transfer.data$team,"Hellas Verona","Verona FC")
transfer.data$team = str_replace(transfer.data$team,"Celta de Vigo","Sede Real Club Celta de Vigo")
transfer.data$team = str_replace(transfer.data$team,"BSC","Berlin")
transfer.data$team = str_replace(transfer.data$team,"FC Schalke","Schalke 04 FC ")
transfer.data$team = str_replace(transfer.data$team,"FC Lorient","Lorient FC")
transfer.data$team = str_replace(transfer.data$team,"OGC Nice","Nice OGC")
transfer.data$team = str_replace(transfer.data$team,"Burnley FC","Burnley Football Club")
transfer.data$team = str_replace(transfer.data$team,"Juventus","Juventus Turin")
transfer.data$team = str_replace(transfer.data$team,"Inter","Inter Milan")
transfer.data$team = str_replace(transfer.data$team,"SM Caen","Stade Malherbe Caen")
transfer.data$team = str_replace(transfer.data$team,"TSG Hoffenheim","Hoffenheim")
transfer.data$team = str_replace(transfer.data$team,"Sevilla FC","Sevilla Fútbol Club")
transfer.data$team = str_replace(transfer.data$team,"Real Betis","Real Betis Sevilla")
transfer.data$team = str_replace(transfer.data$team,"US","FC")
transfer.data$team = str_replace(transfer.data$team,"\\.","")
transfer.data$team = str_replace(transfer.data$team," *\\(.*?\\) *","") #remove (C) for champions
#class transforming to numeric value or character value
transfer.data$transfer.fee.total <- as.numeric(transfer.data$transfer.fee.total)
transfer.data$team <- as.character(transfer.data$team)
###ADD COUNTRIES TO TEAM NAMES (in order to find them on gmap)
transfer.data$team <- with(transfer.data, ifelse(league=="Bundesliga", paste(team,"Germany", sep = " "),
ifelse(league=="Ligue 1", paste(team,"France", sep = " "),
ifelse(league=="Serie A", paste(team,"Italy", sep = " "),
ifelse(league=="Premier league", paste(team,"UK", sep = " "),
ifelse(league=="La Liga", paste(team,"Spain", sep = " "),""))))))
#class transforming to numeric value or character value
transfer.data$transfer.fee <- as.numeric(transfer.data$transfer.fee)
transfer.data$team <- as.character(transfer.data$team)
###ADD COUNTRIES TO TEAM NAMES (in order to find them on gmap)
transfer data geo
transfer.data.geo<-transfer.data %>%
group_by(club.from) %>%
dplyr::summarise()
#na.transfer.data.geo<-transfer.data.geo[!is.na(transfer.data.geo$)] #function applied to transfer data to remove unknown origin
###Looping for club coordinate
#geocodes.club.from <- geocode(as.character(transfer.data$club.from))
transfer.path.origin <- data.frame(transfer.data,geocodes.club.from)
transfer.path.origin$team = str_replace(transfer.path.origin$team," GERMANY","")
transfer.path.origin$team = str_replace(transfer.path.origin$team," FRANCE","")
transfer.path.origin$team = str_replace(transfer.path.origin$team," SPAIN","")
transfer.path.origin$team = str_replace(transfer.path.origin$team," UK","")
transfer.path.origin$team = str_replace(transfer.path.origin$team," ITALY","")
#transfer path origin
transfer.path1<-dplyr::left_join(transfer.data, transfer.path.origin, by = "club.from")
View(transfer.data.geo)
View(transfer.data)
transfer.path.origin= data.frame( player.data.geo$club.from, geocodes.club.from$lon, geocodes.club.from$lat) #creating a dataset with destination coordinates
geocodes.club.from <- geocode(as.character(transfer.data$club.from))
df.spending.club<-read.csv("https://raw.githubusercontent.com/basgpol/SDS-group12/master/Final%20documents/df_spending_club_with_geo.csv", encoding = "UTF8", header = TRUE)
View(transfer.data)
transfer.path.origin <- data.frame(transfer.data,geocodes.club.from)
write.csv(transfer.path.origin,"transfer.path.origin.csv")
transfer.path.destination<-left_join(df.spending.club,transfer.data,by="team")
write.csv(transfer.path.destination,"transfer.path.destination.csv")
View(transfer.path.destination)
transfer.path.destination<-data.frame( transfer.path.destination$club.from, transfer.path.destination$lon, transfer.path.destination$lat, transfer.path.destination$name, transfer.path.destination$league.x, transfer.path.destination$transfer.fee)
transfer.path.destination<-left_join(df.spending.club,transfer.data,by="team")
transfer.path.destination<-data.frame( transfer.path.destination$name, transfer.path.destination$team, transfer.path.destination$club.from,,transfer.path.destination$league.x, transfer.path.destination$transfer.fee transfer.path.destination$lon, transfer.path.destination$lat)
transfer.path.destination.clean<-data.frame( transfer.path.destination$name, transfer.path.destination$team, transfer.path.destination$club.from,,transfer.path.destination$league.x, transfer.path.destination$transfer.fee transfer.path.destination$lon, transfer.path.destination$lat)
transfer.path.destination<-left_join(df.spending.club,transfer.data,by="team")
write.csv(transfer.path.destination,"transfer.path.destination.csv")
transfer.path.destination.clean<-data.frame( transfer.path.destination$name, transfer.path.destination$team, transfer.path.destination$club.from,,transfer.path.destination$league.x, transfer.path.destination$transfer.fee transfer.path.destination$lon, transfer.path.destination$lat)
transfer.path.destination.clean<-data.frame( transfer.path.destination$name, transfer.path.destination$team, transfer.path.destination$club.from,transfer.path.destination$league.x, transfer.path.destination$transfer.fee, transfer.path.destination$lon, transfer.path.destination$lat)
View(transfer.path.destination.clean)
colnames(transfer.path.destination.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.destination.clean)[2] <- "team"#change "club to" to "team"
View(transfer.path.origin)
transfer.path.origin.clean<-data.frame( transfer.path.origin$name, transfer.path.origin$team, transfer.path.origin$club.from,transfer.path.origin$league.x, transfer.path.origin$transfer.fee, transfer.path.origin$lon, transfer.path.origin$lat)
colnames(transfer.path.origin.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.origin.clean)[2] <- "team"#change "club to" to "team"
transfer.path.origin.clean<-data.frame( transfer.path.origin$name, transfer.path.origin$team, transfer.path.origin$club.from,transfer.path.origin$league.x, transfer.path.origin$transfer.fee, transfer.path.origin$lon, transfer.path.origin$lat)
transfer.path.origin.clean<-data.frame( transfer.path.origin$name, transfer.path.origin$team, transfer.path.origin$club.from,transfer.path.origin$league, transfer.path.origin$transfer.fee, transfer.path.origin$lon, transfer.path.origin$lat)
View(transfer.path.origin.clean)
colnames(transfer.path.origin.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.origin.clean)[2] <- "team"#change "club to" to "team"
transfer.path.full<-bind_rows(transfer.path.origin.clean,transfer.path.destination.clean)
transfer.path.full<-bind_rows(transfer.path.origin.clean,transfer.path.destination.clean)
write.csv(transfer.path.full, "transfer_path_full16.csv")
transfer.path.origin.clean<-data.frame( transfer.path.origin$name, transfer.path.origin$team, transfer.path.origin$club.from,transfer.path.origin$league, transfer.path.origin$transfer.fee, transfer.path.origin$lon, transfer.path.origin$lat)
colnames(transfer.path.origin.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.origin.clean)[2] <- "team"#change "club to" to "team"
colnames(transfer.path.origin.clean)[6] <- "lon_o"#change "club to" to "team"
colnames(transfer.path.origin.clean)[7] <- "lat_o"
transfer.path.try<-left_join(transfer.path.origin.clean,transfer.path.destination.clean, by="name")
View(transfer.path.try)
transfer.path.destination.clean<-data.frame( transfer.path.destination$name, transfer.path.destination$team, transfer.path.destination$club.from,transfer.path.destination$league.x, transfer.path.destination$transfer.fee, transfer.path.destination$lon, transfer.path.destination$lat)
colnames(transfer.path.destination.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.destination.clean)[2] <- "team"#change "club to" to "team"
colnames(transfer.path.origin.clean)[6] <- "lon_d"#change "club to" to "team"
colnames(transfer.path.origin.clean)[7] <- "lat_d"
transfer.path.origin.clean<-data.frame( transfer.path.origin$name, transfer.path.origin$team, transfer.path.origin$club.from,transfer.path.origin$league, transfer.path.origin$transfer.fee, transfer.path.origin$lon, transfer.path.origin$lat)
colnames(transfer.path.origin.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.origin.clean)[2] <- "team"#change "club to" to "team"
colnames(transfer.path.origin.clean)[6] <- "lon_o"#change "club to" to "team"
colnames(transfer.path.origin.clean)[7] <- "lat_o"
transfer.path.try<-left_join(transfer.path.origin.clean,transfer.path.destination.clean, by="name")
geo <- list(
scope = 'europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon, y = ~lat, text = ~name,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
library(plotly)
#install.packages("extrafont")
#install.packages("Cairo")
library(extrafont)
library("ggmap")# getting maps and coordinates from google
library(maptools)# getting maps and coordinates from google
library(maps)# getting maps and coordinates from google
library("ggplot2")# plotting the data
library(dplyr)#tidying dataset
library(rworldmap)
library(stringr)#dealing with strings and replacing strings in observations
library(RCurl)
geo <- list(
scope = 'europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon, y = ~lat, text = ~name,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
geo <- list(
scope = 'europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon, y = ~lat, text = ~name,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(league, name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon, y = ~lat, text = ~name,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(team, name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
?locationmode
??locationmode
geo <- list(
scope = 'north america',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon, y = ~lat, text = ~name,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
install.packages(plotly)
install.packages("plotly")
install.packages("plotly")
library(plotly)
geo <- list(
scope = 'north america',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon, y = ~lat, text = ~name,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
geo <- list(
scope = 'Europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon, y = ~lat, text = ~name,
hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.full, x = ~lon_d, y = ~lat_d, text = ~name,
hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
View(transfer.path.full)
transfer.path.destination.clean<-data.frame( transfer.path.destination$name, transfer.path.destination$team, transfer.path.destination$club.from,transfer.path.destination$league.x, transfer.path.destination$transfer.fee, transfer.path.destination$lon, transfer.path.destination$lat)
colnames(transfer.path.destination.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.destination.clean)[2] <- "team"#change "club to" to "team"
colnames(transfer.path.origin.clean)[6] <- "lon_d"#change "club to" to "team"
colnames(transfer.path.origin.clean)[7] <- "lat_d"
transfer.path.origin.clean<-data.frame( transfer.path.origin$name, transfer.path.origin$team, transfer.path.origin$club.from,transfer.path.origin$league, transfer.path.origin$transfer.fee, transfer.path.origin$lon, transfer.path.origin$lat)
colnames(transfer.path.origin.clean)[1] <- "name"#change "club to" to "team"
colnames(transfer.path.origin.clean)[2] <- "team"#change "club to" to "team"
colnames(transfer.path.origin.clean)[6] <- "lon_o"#change "club to" to "team"
colnames(transfer.path.origin.clean)[7] <- "lat_o"
#BINDING
transfer.path.try<-left_join(transfer.path.origin.clean,transfer.path.destination.clean, by="name")
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.try, x = ~lon_d, y = ~lat_d, text = ~name,
hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
View(transfer.path.try)
colnames(transfer.path.try)[12] <- "lon_d"#change "club to" to "team"
colnames(transfer.path.try)[13] <- "lat_d"
geo <- list(
scope = 'Europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.try, x = ~lon_d, y = ~lat_d, text = ~name,
hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.try, x = transfer.path.try$lon_d, y = transfer.path.try$lat_d, text = transfer.path.try$name,
hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.try, x = transfer.path.try$lon_d, y = transfer.path.try$lat_d, text = transfer.path.try$name,
hoverinfo = "text", alpha = 0.5
)
# %>%
#   add_segments(
#     data = group_by(name),
#     x = ~lon_o, xend = ~lon_d,
#     y = ~lat_o, yend = ~lat_d,
#     alpha = 0.3, size = I(1), hoverinfo = "none"
#   )
%>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
geo <- list(
scope = 'Europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
geo <- list(
scope = 'Europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.try, x = transfer.path.try$lon_d, y = transfer.path.try$lat_d, text = transfer.path.try$name,
hoverinfo = "text", alpha = 0.5
)
# %>%
#   add_segments(
#     data = group_by(name),
#     x = ~lon_o, xend = ~lon_d,
#     y = ~lat_o, yend = ~lat_d,
#     alpha = 0.3, size = I(1), hoverinfo = "none"
#   )
%>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
geo <- list(
scope = 'Europe',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
plot_geo(locationmode = 'Europe', color = I("red")) %>%
add_markers(
data = transfer.path.try, x = transfer.path.try$lon_d, y = transfer.path.try$lat_d, text = transfer.path.try$name,
hoverinfo = "text", alpha = 0.5
)
plot_geo(locationmode = 'Europe', color ="red") %>%
add_markers(
data = transfer.path.try, x = transfer.path.try$lon_d, y = transfer.path.try$lat_d, text = transfer.path.try$name,
hoverinfo = "text", alpha = 0.5
)
plot_geo(locationmode = 'Europe', color ="red") %>%
add_markers(
data = transfer.path.try, x = transfer.path.try$lon_d, y = transfer.path.try$lat_d, text = transfer.path.try$name,
hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(name),
x = ~lon_o, xend = ~lon_d,
y = ~lat_o, yend = ~lat_d,
alpha = 0.3, size = I(1), hoverinfo = "none"
)%>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
plot_geo(data= transfer.path.try,lat = c(lat_o, lat_d), lon = c(lon_o, lon_d)) %>%
add_lines(color = I("blue"), size = I(2)) %>%
layout(
title = 'London to NYC Great Circle',
showlegend = FALSE,
geo = list(
resolution = 50,
showland = TRUE,
showlakes = TRUE,
landcolor = toRGB("grey80"),
countrycolor = toRGB("grey80"),
lakecolor = toRGB("white"),
projection = list(type = "equirectangular"),
coastlinewidth = 2,
lataxis = list(
range = c(20, 60),
showgrid = TRUE,
tickmode = "linear",
dtick = 10
),
lonaxis = list(
range = c(-100, 20),
showgrid = TRUE,
tickmode = "linear",
dtick = 20
)
)
)
plot_geo(lat = c(40.7127, 51.5072), lon = c(-74.0059, 0.1275)) %>%
add_lines(color = I("blue"), size = I(2)) %>%
layout(
title = 'London to NYC Great Circle',
showlegend = FALSE,
geo = list(
resolution = 50,
showland = TRUE,
showlakes = TRUE,
landcolor = toRGB("grey80"),
countrycolor = toRGB("grey80"),
lakecolor = toRGB("white"),
projection = list(type = "equirectangular"),
coastlinewidth = 2,
lataxis = list(
range = c(20, 60),
showgrid = TRUE,
tickmode = "linear",
dtick = 10
),
lonaxis = list(
range = c(-100, 20),
showgrid = TRUE,
tickmode = "linear",
dtick = 20
)
)
)
